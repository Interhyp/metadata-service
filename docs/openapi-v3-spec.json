{
  "openapi": "3.0.1",
  "info": {
    "title": "Metadata",
    "description": "Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**",
    "contact": {
      "name": "replace me",
      "url": "http://domain.com",
      "email": "somebody@some-organisation.com"
    },
    "license": {
      "name": "(C) 2022 - Some Organisation",
      "url": "https://www.some-organisation.com/"
    },
    "version": "v1"
  },
  "tags": [
    {
      "name": "/rest/api/v1/owners"
    },
    {
      "name": "/rest/api/v1/services"
    },
    {
      "name": "/rest/api/v1/repositories"
    },
    {
      "name": "management"
    },
    {
      "name": "webhook"
    }
  ],
  "paths": {
    "/rest/api/v1/owners": {
      "get": {
        "tags": [
          "/rest/api/v1/owners"
        ],
        "summary": "get owners",
        "description": "Obtains all owners. Currently, no filtering is available.",
        "operationId": "getOwners",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerListDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/api/v1/owners/{owner}": {
      "get": {
        "tags": [
          "/rest/api/v1/owners"
        ],
        "summary": "get a single owner by alias",
        "description": "Obtains owner information for a single owner.",
        "operationId": "getOwner",
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerDto"
                }
              }
            }
          },
          "404": {
            "description": "Owner not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "/rest/api/v1/owners"
        ],
        "summary": "create a new owner with a given alias",
        "description": "Create a new owner.",
        "operationId": "createOwner",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "example": "/rest/api/v1/owners/some-owner"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (invalid owner alias format, or the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - this owner alias already exists",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "/rest/api/v1/owners"
        ],
        "summary": "update an existing owner with a given alias",
        "description": "Update an owner.",
        "operationId": "updateOwner",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - an owner with this alias does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "/rest/api/v1/owners"
        ],
        "summary": "patch an existing owner with a given alias",
        "description": "Patch an owner.",
        "operationId": "patchOwner",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OwnerPatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - an owner with this alias does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OwnerDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "/rest/api/v1/owners"
        ],
        "summary": "delete the owner with a given alias",
        "description": "Delete an owner - cannot have any services or repositories left",
        "operationId": "deleteOwner",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "owner",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletionDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - successfully deleted"
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - an owner with this alias does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - this owner still owns something and cannot be deleted",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/api/v1/services": {
      "get": {
        "tags": [
          "/rest/api/v1/services"
        ],
        "summary": "get services",
        "description": "Obtains the list of services, possibly filtered by an owner alias.",
        "operationId": "getServices",
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "description": "Allows filtering the output by owner alias. Valid aliases match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            },
            "example": "some-owner"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceListDto"
                }
              }
            }
          },
          "404": {
            "description": "Owner not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/api/v1/services/{service}": {
      "get": {
        "tags": [
          "/rest/api/v1/services"
        ],
        "summary": "get a single service by name",
        "operationId": "getService",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "/rest/api/v1/services"
        ],
        "summary": "register a new service with the given name",
        "description": "Register a new service in the metadata.",
        "operationId": "registerService",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "example": "/rest/api/v1/services/unicorn-finder-service"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (invalid service name format, or the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - this service name already exists (may be under a different owner - service names are globally unique)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "/rest/api/v1/services"
        ],
        "summary": "update an existing service with the given name",
        "description": "Update a service.",
        "operationId": "updateService",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - a service with this name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "/rest/api/v1/services"
        ],
        "summary": "patch an existing service with the given name",
        "description": "Patch a service.",
        "operationId": "patchService",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServicePatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - a service with this name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServiceDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "/rest/api/v1/services"
        ],
        "summary": "delete the service with a given name",
        "description": "Delete a service. Will not delete associated repositories from metadata.",
        "operationId": "deleteService",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletionDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - successfully deleted"
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - a service with this name does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, git change could not be pushed. Please retry the operation based on the current data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/api/v1/services/{service}/promoters": {
      "get": {
        "tags": [
          "/rest/api/v1/services"
        ],
        "summary": "get all users who may promote a service",
        "operationId": "getServicePromoters",
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServicePromotersDto"
                }
              }
            }
          },
          "404": {
            "description": "Service not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/api/v1/repositories": {
      "get": {
        "tags": [
          "/rest/api/v1/repositories"
        ],
        "summary": "get repositories",
        "description": "Obtain a list of repositories, potentially filtered by owner alias or service name",
        "operationId": "getRepositoriesOfOwner",
        "parameters": [
          {
            "name": "owner",
            "in": "query",
            "required": false,
            "description": "Optional - the alias of an owner. If present, only repositories with this owner are returned. Must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            },
            "example": "some-owner"
          },
          {
            "name": "service",
            "in": "query",
            "required": false,
            "description": "Optional - the name of a service. If present, only repositories referenced by the given service are returned. Must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            },
            "example": "unicorn-finder-service"
          },
          {
            "name": "name",
            "in": "query",
            "required": false,
            "description": "Optional - allows filtering the output by repository name (the first part of the key before the .). Must match `^[a-z](-?[a-z0-9]+)*$`.",
            "schema": {
              "type": "string"
            },
            "example": "some-service"
          },
          {
            "name": "type",
            "in": "query",
            "required": false,
            "description": "Optional - allows filtering the output by repository type (the second part of the key after the .). Must currently be one of api, helm-chart, helm-deployment, implementation, terraform-module, javascript-module.",
            "schema": {
              "type": "string"
            },
            "example": "helm-chart"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryListDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/rest/api/v1/repositories/{repository}": {
      "get": {
        "tags": [
          "/rest/api/v1/repositories"
        ],
        "summary": "get a single repository by key",
        "operationId": "getRepository",
        "parameters": [
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "unicorn-finder-service.implementation"
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDto"
                }
              }
            }
          },
          "404": {
            "description": "Owner or repository not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "/rest/api/v1/repositories"
        ],
        "summary": "register a new repository with the given key",
        "description": "Register a new repository in the metadata. Note that this does not actually create it.",
        "operationId": "registerRepository",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "unicorn-finder-service.implementation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryCreateDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "headers": {
              "Location": {
                "schema": {
                  "type": "string"
                },
                "example": "/rest/api/v1/repositories/unicorn-finder-service.implementation"
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (invalid repository key format, or the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - this repository key already exists (may be under a different owner - repository keys are globally unique)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "/rest/api/v1/repositories"
        ],
        "summary": "update an existing repository with the given key",
        "description": "Update a repository",
        "operationId": "updateRepository",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "unicorn-finder-service.implementation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - a repository with this key does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp, or you tried to move a repository to another owner while a service refers to it, in this case, please move the service instead",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "/rest/api/v1/repositories"
        ],
        "summary": "patch an existing repository with the given key",
        "description": "Patch a repository.",
        "operationId": "patchRepository",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "unicorn-finder-service.implementation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RepositoryPatchDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDto"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - a repository with this key does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RepositoryDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "/rest/api/v1/repositories"
        ],
        "summary": "remove the repository with the given key",
        "description": "Delete a repository from metadata. Will not delete the actual repository, just the metadata.",
        "operationId": "removeRepository",
        "security": [
          {
            "bearerAuth": []
          },
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "repository",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string"
            },
            "example": "unicorn-finder-service.implementation"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/DeletionDto"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content - successfully deleted"
          },
          "400": {
            "description": "Unable to parse input (the body failed to validate)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "403": {
            "description": "Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "404": {
            "description": "Not Found - a repository with this key does not exist",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "409": {
            "description": "Conflict - concurrent update detected, git change could not be pushed. Please retry the operation based on the current data",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          },
          "502": {
            "description": "Bad gateway - a downstream error occurred",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/health": {
      "get": {
        "tags": [
          "management"
        ],
        "operationId": "getHealth",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthComponent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/management/health": {
      "get": {
        "tags": [
          "management"
        ],
        "operationId": "getHealth_1",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/HealthComponent"
                }
              }
            }
          },
          "500": {
            "description": "Internal Server Error",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ErrorDto"
                }
              }
            }
          }
        }
      }
    },
    "/webhook": {
      "post": {
        "tags": [
          "webhook"
        ],
        "operationId": "gitNotify",
        "description": "webhook notification endpoint to be configured in the git server to notify the service that it should check for new commits",
        "responses": {
          "204": {
            "description": "No content"
          },
          "500": {
            "description": "Internal Server Error"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "OwnerDto": {
        "required": [
          "contact",
          "timeStamp",
          "commitHash",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "type": "string",
            "description": "The contact information of the owner",
            "example": "squad@some-organisation.com"
          },
          "productOwner": {
            "type": "string",
            "description": "The product owner of this owner space",
            "example": "kschlangenheld"
          },
          "groups": {
            "type": "object",
            "description": "Map of string (group name e.g. some-owner) of strings (list of usernames), one username for each group is required.",
            "example": {
              "some-owner": {
              }
            },
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "promoters": {
            "type": "array",
            "description": "A list of users that are allowed to promote services in this owner space",
            "items": {
              "type": "string",
              "description": "The username of a user allowed to promote services in this owner space",
              "example": "kschlangenheld"
            },
            "example": [
              "kschlangenheld",
              "someotheruser"
            ]
          },
          "defaultJiraProject": {
            "type": "string",
            "description": "The default jira project that is used by this owner space",
            "example": "LELTEC"
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.",
            "example": "2022-04-18T14:22:38Z"
          },
          "commitHash": {
            "type": "string",
            "description": "The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.",
            "example": "6c8ac2c35791edf9979623c717a243fc53400000"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "OwnerCreateDto": {
        "required": [
          "contact",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "type": "string",
            "description": "The contact information of the owner",
            "example": "squad@some-organisation.com"
          },
          "productOwner": {
            "type": "string",
            "description": "The product owner of this owner space",
            "example": "kschlangenheld"
          },
          "promoters": {
            "type": "array",
            "description": "A list of users that are allowed to promote services in this owner space",
            "items": {
              "type": "string",
              "description": "The username of a user allowed to promote services in this owner space",
              "example": "kschlangenheld"
            },
            "example": [
              "kschlangenheld",
              "someotheruser"
            ]
          },
          "groups": {
            "type": "object",
            "description": "Map of string (group name e.g. some-owner) of strings (list of usernames), one username for each group is required.",
            "example": {
              "some-owner": {
              }
            },
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "defaultJiraProject": {
            "type": "string",
            "description": "The default jira project that is used by this owner space",
            "example": "LELTEC"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "OwnerPatchDto": {
        "required": [
          "timeStamp",
          "commitHash",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "contact": {
            "type": "string",
            "description": "The contact information of the owner",
            "example": "squad@some-organisation.com"
          },
          "productOwner": {
            "type": "string",
            "description": "The product owner of this owner space",
            "example": "kschlangenheld"
          },
          "groups": {
            "type": "object",
            "description": "Map of string (group name e.g. some-owner) of strings (list of usernames), one username for each group is required.",
            "example": {
              "some-owner": {
              }
            },
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "promoters": {
            "type": "array",
            "description": "A list of users that are allowed to promote services in this owner space",
            "items": {
              "type": "string",
              "description": "The username of a user allowed to promote services in this owner space",
              "example": "kschlangenheld"
            },
            "example": [
              "kschlangenheld",
              "someotheruser"
            ]
          },
          "defaultJiraProject": {
            "type": "string",
            "description": "The default jira project that is used by this owner space",
            "example": "LELTEC"
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.",
            "example": "2022-04-18T14:22:38Z"
          },
          "commitHash": {
            "type": "string",
            "description": "The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.",
            "example": "6c8ac2c35791edf9979623c717a243fc53400000"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "OwnerListDto": {
        "required": [
          "owners",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "owners": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/OwnerDto"
            },
            "example": {
              "some-owner": {
                "contact": "squad@some-organisation.com",
                "productOwner": "kschlangenheld",
                "defaultJiraProject": "LELTEC",
                "timeStamp": "2022-04-18T14:22:38Z"
              }
            }
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which the list of owners was obtained from service-metadata",
            "example": "2022-04-18T14:22:38Z"
          }
        }
      },
      "ServiceDto": {
        "required": [
          "owner",
          "quicklinks",
          "repositories",
          "alertTarget",
          "timeStamp",
          "commitHash",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The alias of the service owner. Note, an update with changed owner will move the service and any associated repositories to the new owner, but of course this will not move e.g. Jenkins jobs. That's your job.",
            "example": "some-owner"
          },
          "description": {
            "type": "string",
            "description": "A short description of the functionality of the service."
          },
          "quicklinks": {
            "type": "array",
            "description": "A list of quicklinks related to the service",
            "example": [
              {
                "url": "/swagger-ui/index.html",
                "title": "SwaggerUI"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Quicklink"
            }
          },
          "repositories": {
            "type": "array",
            "description": "The keys of repositories associated with the service. When sending an update, they must refer to repositories that belong to this service, or the update will fail",
            "items": {
              "type": "string",
              "description": "The key of a repository associated with the service",
              "example": "unicorn-finder-service.implementation"
            }
          },
          "alertTarget": {
            "type": "string",
            "description": "The default channel used to send any alerts of the service to. Can be an email address or a Teams webhook URL",
            "example": "somebody@some-organisation.com"
          },
          "developmentOnly": {
            "type": "boolean",
            "description": "True for services that will be permanently deployed to the Development environment only.",
            "default": false
          },
          "operationType": {
            "type": "string",
            "description": "The operation type of the service. 'WORKLOAD' follows the default deployment strategy of one instance per environment, 'PLATFORM' one instance per cluster or node and 'APPLICATION' is a standalone application that is not deployed via the common strategies.",
            "default": "WORKLOAD",
            "x-extensible-enum": [
              "WORKLOAD",
              "PLATFORM",
              "APPLICATION"
            ]
          },
          "requiredScans": {
            "type": "array",
            "description": "The security scans that are required for this service. Optional, SAST and/or SCA.",
            "items": {
              "type": "string",
              "description": "Currently, only 'SAST' and 'SCA' are allowed",
              "example": "SAST"
            }
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.",
            "example": "2022-04-18T14:22:38Z"
          },
          "commitHash": {
            "type": "string",
            "description": "The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.",
            "example": "6c8ac2c35791edf9979623c717a243fc53400000"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "ServiceCreateDto": {
        "required": [
          "owner",
          "quicklinks",
          "repositories",
          "alertTarget",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The alias of the service owner. Note, an update with changed owner will move the service and any associated repositories to the new owner, but of course this will not move e.g. Jenkins jobs. That's your job.",
            "example": "some-owner"
          },
          "description": {
            "type": "string",
            "description": "A short description of the functionality of the service."
          },
          "quicklinks": {
            "type": "array",
            "description": "A list of quicklinks related to the service",
            "example": [
              {
                "url": "/swagger-ui/index.html",
                "title": "SwaggerUI"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Quicklink"
            }
          },
          "repositories": {
            "type": "array",
            "description": "The keys of repositories associated with the service. When sending an update, they must refer to repositories that belong to this service, or the update will fail",
            "items": {
              "type": "string",
              "description": "The key of a repository associated with the service",
              "example": "unicorn-finder-service.implementation"
            }
          },
          "alertTarget": {
            "type": "string",
            "description": "The default channel used to send any alerts of the service to. Can be an email address or a Teams webhook URL",
            "example": "somebody@some-organisation.com"
          },
          "developmentOnly": {
            "type": "boolean",
            "description": "True for services that will be permanently deployed to the Development environment only.",
            "default": false
          },
          "operationType": {
            "type": "string",
            "description": "The operation type of the service. 'WORKLOAD' follows the default deployment strategy of one instance per environment, 'PLATFORM' one instance per cluster or node and 'APPLICATION' is a standalone application that is not deployed via the common strategies.",
            "default": "WORKLOAD",
            "x-extensible-enum": [
              "WORKLOAD",
              "PLATFORM",
              "APPLICATION"
            ]
          },
          "requiredScans": {
            "type": "array",
            "description": "The security scans that are required for this service. Optional, SAST and/or SCA.",
            "items": {
              "type": "string",
              "description": "Currently, only 'SAST' and 'SCA' are allowed",
              "example": "SAST"
            }
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "ServicePatchDto": {
        "required": [
          "timeStamp",
          "commitHash",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The alias of the service owner. Note, a patch with changed owner will move the service and any associated repositories to the new owner, but of course this will not move e.g. Jenkins jobs. That's your job.",
            "example": "some-owner"
          },
          "description": {
            "type": "string",
            "description": "A short description of the functionality of the service."
          },
          "quicklinks": {
            "type": "array",
            "description": "A list of quicklinks related to the service",
            "example": [
              {
                "url": "/swagger-ui/index.html",
                "title": "SwaggerUI"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/Quicklink"
            }
          },
          "repositories": {
            "type": "array",
            "description": "The keys of repositories associated with the service. When sending an update, they must refer to repositories that belong to this service, or the update will fail",
            "items": {
              "type": "string",
              "description": "The key of a repository associated with the service",
              "example": "unicorn-finder-service.implementation"
            }
          },
          "alertTarget": {
            "type": "string",
            "description": "The default channel used to send any alerts of the service to. Can be an email address or a Teams webhook URL",
            "example": "somebody@some-organisation.com"
          },
          "developmentOnly": {
            "type": "boolean",
            "description": "True for services that will be permanently deployed to the Development environment only.",
            "default": false
          },
          "operationType": {
            "type": "string",
            "description": "The operation type of the service. 'WORKLOAD' follows the default deployment strategy of one instance per environment, 'PLATFORM' one instance per cluster or node and 'APPLICATION' is a standalone application that is not deployed via the common strategies.",
            "default": "WORKLOAD",
            "x-extensible-enum": [
              "WORKLOAD",
              "PLATFORM",
              "APPLICATION"
            ]
          },
          "requiredScans": {
            "type": "array",
            "description": "The security scans that are required for this service. Optional, SAST and/or SCA.",
            "items": {
              "type": "string",
              "description": "Currently, only 'SAST' and 'SCA' are allowed",
              "example": "SAST"
            }
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.",
            "example": "2022-04-18T14:22:38Z"
          },
          "commitHash": {
            "type": "string",
            "description": "The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.",
            "example": "6c8ac2c35791edf9979623c717a243fc53400000"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "ServiceListDto": {
        "required": [
          "services",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "services": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/ServiceDto"
            },
            "example": {
              "unicorn-finder-service": {
                "quicklinks": [],
                "repositories": [
                  "unicorn-finder-service.implementation",
                  "unicorn-finder-service.helm-deployment"
                ],
                "alertTarget": "somebody@some-organisation.com",
                "developmentOnly": false,
                "operationType": "WORKLOAD",
                "timeStamp": "2022-04-18T14:22:38Z"
              }
            }
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which the list of services was obtained from service-metadata",
            "example": "2022-04-18T14:22:38Z"
          }
        }
      },
      "ServicePromotersDto": {
        "required": [
          "promoters"
        ],
        "type": "object",
        "properties": {
          "promoters": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "example": ["user1","user2"]
          }
        }
      },
      "Quicklink": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "description": {
            "type": "string"
          }
        },
        "description": "A list of quicklinks related to the service",
        "example": [
          {
            "url": "/swagger-ui/index.html",
            "title": "SwaggerUI",
            "description": "Displays the frontend for the API."
          }
        ]
      },
      "RepositoryDto": {
        "required": [
          "owner",
          "url",
          "mainline",
          "timeStamp",
          "commitHash",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The alias of the repository owner",
            "example": "some-owner"
          },
          "url": {
            "type": "string"
          },
          "mainline": {
            "type": "string"
          },
          "generator": {
            "type": "string",
            "description": "the generator used for the initial contents of this repository",
            "example": "java-spring-cloud"
          },
          "unittest": {
            "type": "boolean",
            "default": false,
            "description": "this repository contains unit tests (currently ignored except for helm charts)"
          },
          "configuration": {
            "$ref": "#/components/schemas/RepositoryConfigurationDto"
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.",
            "example": "2022-04-18T14:22:38Z"
          },
          "commitHash": {
            "type": "string",
            "description": "The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.",
            "example": "6c8ac2c35791edf9979623c717a243fc53400000"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "RepositoryCreateDto": {
        "required": [
          "owner",
          "url",
          "mainline",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The alias of the repository owner",
            "example": "some-owner"
          },
          "url": {
            "type": "string"
          },
          "mainline": {
            "type": "string"
          },
          "generator": {
            "type": "string",
            "description": "the generator used for the initial contents of this repository",
            "example": "java-spring-cloud"
          },
          "unittest": {
            "type": "boolean",
            "default": false,
            "description": "this repository contains unit tests (currently ignored except for helm charts)"
          },
          "configuration": {
            "$ref": "#/components/schemas/RepositoryConfigurationDto"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "RepositoryPatchDto": {
        "required": [
          "timeStamp",
          "commitHash",
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "owner": {
            "type": "string",
            "description": "The alias of the repository owner",
            "example": "some-owner"
          },
          "url": {
            "type": "string"
          },
          "mainline": {
            "type": "string"
          },
          "generator": {
            "type": "string",
            "description": "the generator used for the initial contents of this repository",
            "example": "java-spring-cloud"
          },
          "unittest": {
            "type": "boolean",
            "default": false,
            "description": "this repository contains unit tests (currently ignored except for helm charts)"
          },
          "configuration": {
            "$ref": "#/components/schemas/RepositoryConfigurationDto"
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.",
            "example": "2022-04-18T14:22:38Z"
          },
          "commitHash": {
            "type": "string",
            "description": "The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.",
            "example": "6c8ac2c35791edf9979623c717a243fc53400000"
          },
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing a change, or the last jira issue used.",
            "example": "ISSUE-0000"
          }
        }
      },
      "RepositoryListDto": {
        "required": [
          "repositories",
          "timeStamp"
        ],
        "type": "object",
        "properties": {
          "repositories": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/RepositoryDto"
            },
            "example": {
              "unicorn-finder-service.helm-deployment": {
                "url": "ssh://git@bitbucket.some-organisation.com:7999/UNICORNS/unicorn-finder-service-deployment.git",
                "mainline": "main",
                "configuration": {
                  "commitMessageType": "DEFAULT",
                  "requireIssue": true,
                  "requireSuccessfulBuilds": 1,
                  "accessKeys": [
                    {
                      "key": "DEPLOYMENT",
                      "permission": "REPO_READ"
                    }
                  ],
                  "webhooks": {
                    "pipelineTrigger": true,
                    "predefined": [
                      "jenkinsPipeline"
                    ],
                    "additional": [
                      {
                        "name": "trigger something",
                        "url": "https://somejenkinspipeline",
                        "events": []
                      }
                    ]
                  },
                  "approvers": {
                    "testing": [
                      "user-one",
                      "user-two"
                    ]
                  },
                  "defaultReviewers": [],
                  "signedApprovers": []
                },
                "timeStamp": "2022-04-18T14:22:38Z"
              },
              "unicorn-finder-service.implementation": {
                "url": "ssh://git@bitbucket.some-organisation.com:7999/UNICORNS/unicorn-finder-service.git",
                "mainline": "master",
                "timeStamp": "2022-04-18T14:22:38Z"
              }
            }
          },
          "timeStamp": {
            "type": "string",
            "description": "ISO-8601 UTC date time at which the list of repositories was obtained from service-metadata",
            "example": "2022-04-18T14:22:38Z"
          }
        }
      },
      "DeletionDto": {
        "required": [
          "jiraIssue"
        ],
        "type": "object",
        "properties": {
          "jiraIssue": {
            "type": "string",
            "description": "The jira issue to use for committing the deletion.",
            "example": "ISSUE-0000"
          }
        }
      },
      "RepositoryConfigurationDto": {
        "type": "object",
        "description": "Attributes to configure the repository. If a configuration exists there are also some configured defaults for the repository.",
        "properties": {
          "accessKeys": {
            "type": "array",
            "description": "Ssh-Keys configured on the repository.",
            "items": {
              "$ref": "#/components/schemas/RepositoryConfigurationAccessKeyDto"
            }
          },
          "commitMessageType": {
            "type": "string",
            "description": "Adds a corresponding commit message regex.",
            "enum": [
              "DEFAULT",
              "SEMANTIC"
            ]
          },
          "requireIssue": {
            "type": "boolean",
            "description": "Configures JQL matcher with query: issuetype in (Story, Bug) AND 'Risk Level' is not EMPTY"
          },
          "requireSuccessfulBuilds": {
            "type": "integer",
            "description": "Set the required successful builds counter."
          },
          "requireConditions": {
            "type": "object",
            "description": "Map of string (key name e.g. some-key) of branch references.",
            "required": [
              "refMatcher"
            ],
            "example": {
              "some-key": {
                "refMatcher": "main"
              }
            },
            "additionalProperties": {
              "$ref": "#/components/schemas/ConditionReferenceDto"
            }
          },
          "webhooks": {
            "$ref": "#/components/schemas/RepositoryConfigurationWebhooksDto"
          },
          "approvers": {
            "type": "object",
            "description": "Map of string (group name e.g. some-owner) of strings (list of approvers), one approval for each group is required.",
            "example": {
              "some-owner": {
              }
            },
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          "defaultReviewers": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "signedApprovers": {
            "type": "array",
            "description": "List of users, who can sign a pull request.",
            "items": {
              "type": "string"
            }
          }
        }
      },
      "RepositoryConfigurationAccessKeyDto": {
        "required": [
          "key"
        ],
        "properties": {
          "key": {
            "type": "string",
            "enum": [
              "DEPLOYMENT"
            ]
          },
          "permission": {
            "type": "string",
            "enum": [
              "REPO_READ",
              "REPO_WRITE"
            ]
          }
        }
      },
      "ConditionReferenceDto": {
        "type": "object",
        "description": "References configured to the condition.",
        "required": [
          "refMatcher"
        ],
        "properties": {
          "refMatcher": {
            "type": "string",
            "description": "Branch reference."
          }
        }
      },
      "RepositoryConfigurationWebhooksDto": {
        "type": "object",
        "description": "Webhooks configured to the repository.",
        "properties": {
          "pipelineTrigger": {
            "type": "boolean",
            "description": "Default pipeline trigger webhook."
          },
          "predefined": {
            "type": "array",
            "description": "List of predefined webhooks",
            "items": {
              "type": "string"
            }
          },
          "additional": {
            "type": "array",
            "description": "Additional webhooks to be configured.",
            "items": {
              "$ref": "#/components/schemas/RepositoryConfigurationWebhookDto"
            }
          }
        }
      },
      "RepositoryConfigurationWebhookDto": {
        "type": "object",
        "required": [
          "name",
          "url"
        ],
        "properties": {
          "name": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "events": {
            "type": "array",
            "description": "Events the webhook should be triggered with.",
            "example": "repo:refs_changed, repo:modified, ...",
            "items": {
              "type": "string"
            }
          },
          "configuration": {
            "type": "object",
            "example": "secret: '<anysecret>'",
            "additionalProperties": {
              "type": "string"
            }
          }
        }
      },
      "ErrorDto": {
        "type": "object",
        "properties": {
          "details": {
            "type": "string"
          },
          "message": {
            "type": "string"
          },
          "timestamp": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "HealthComponent": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          },
          "status": {
            "type": "string"
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      },
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    }
  }
}