openapi: 3.1.0
info:
  title: Metadata
  description: 'Obtain and manage metadata for owners, services, repositories. Please see [README](https://github.com/Interhyp/metadata-service/blob/main/README.md) for details. **CLIENTS MUST READ!**'
  contact:
    name: replace me
    url: 'http://domain.com'
    email: somebody@some-organisation.com
  license:
    name: (C) 2022 - Some Organisation
    url: 'https://www.some-organisation.com/'
  version: v1
paths:
  /rest/api/v1/owners:
    get:
      operationId: getOwners
      summary: get owners
      description: 'Obtains all owners. Currently, no filtering is available.'
      parameters: []
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerListDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - /rest/api/v1/owners
  '/rest/api/v1/owners/{owner}':
    get:
      operationId: getOwner
      summary: get a single owner by alias
      description: Obtains owner information for a single owner.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerDto'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - /rest/api/v1/owners
    post:
      operationId: createOwner
      summary: create a new owner with a given alias
      description: Create a new owner.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerCreateDto'
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              example: /rest/api/v1/owners/some-owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerDto'
        '400':
          description: 'Unable to parse input (invalid owner alias format, or the body failed to validate)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: Conflict - this owner alias already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/owners
    put:
      operationId: updateOwner
      summary: update an existing owner with a given alias
      description: Update an owner.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerDto'
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - an owner with this alias does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/owners
    patch:
      operationId: patchOwner
      summary: patch an existing owner with a given alias
      description: Patch an owner.
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OwnerPatchDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerDto'
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - an owner with this alias does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OwnerDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/owners
    delete:
      operationId: deleteOwner
      summary: delete the owner with a given alias
      description: Delete an owner - cannot have any services or repositories left
      parameters:
        - name: owner
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletionDto'
      responses:
        '204':
          description: No Content - successfully deleted
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - an owner with this alias does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: Conflict - this owner still owns something and cannot be deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/owners
  /rest/api/v1/services:
    get:
      operationId: getServices
      summary: get services
      description: 'Obtains the list of services, possibly filtered by an owner alias.'
      parameters:
        - name: owner
          in: query
          description: 'Allows filtering the output by owner alias. Valid aliases match `^[a-z](-?[a-z0-9]+)*$`.'
          required: false
          schema:
            type: string
          example: some-owner
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceListDto'
        '404':
          description: Owner not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - /rest/api/v1/services
  '/rest/api/v1/services/{service}':
    get:
      operationId: getService
      summary: get a single service by name
      parameters:
        - name: service
          in: path
          description: 'The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - /rest/api/v1/services
    post:
      operationId: registerService
      summary: register a new service with the given name
      description: Register a new service in the metadata.
      parameters:
        - name: service
          in: path
          description: 'The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceCreateDto'
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              example: /rest/api/v1/services/unicorn-finder-service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        '400':
          description: 'Unable to parse input (invalid service name format, or the body failed to validate)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: Conflict - this service name already exists (may be under a different owner - service names are globally unique)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/services
    put:
      operationId: updateService
      summary: update an existing service with the given name
      description: Update a service.
      parameters:
        - name: service
          in: path
          description: 'The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - a service with this name does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/services
    patch:
      operationId: patchService
      summary: patch an existing service with the given name
      description: Patch a service.
      parameters:
        - name: service
          in: path
          description: 'The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServicePatchDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - a service with this name does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServiceDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/services
    delete:
      operationId: deleteService
      summary: delete the service with a given name
      description: Delete a service. Will not delete associated repositories from metadata.
      parameters:
        - name: service
          in: path
          description: 'The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletionDto'
      responses:
        '204':
          description: No Content - successfully deleted
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - a service with this name does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, git change could not be pushed. Please retry the operation based on the current data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/services
  '/rest/api/v1/services/{service}/promoters':
    get:
      operationId: getServicePromoters
      summary: get all users who may promote a service
      parameters:
        - name: service
          in: path
          description: 'The (globally unique) name of the service, must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ServicePromotersDto'
        '404':
          description: Service not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - /rest/api/v1/services
  /rest/api/v1/repositories:
    get:
      operationId: getRepositoriesOfOwner
      summary: get repositories
      description: 'Obtain a list of repositories, potentially filtered by owner alias or service name'
      parameters:
        - name: owner
          in: query
          description: 'Optional - the alias of an owner. If present, only repositories with this owner are returned. Must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: false
          schema:
            type: string
          example: some-owner
        - name: service
          in: query
          description: 'Optional - the name of a service. If present, only repositories referenced by the given service are returned. Must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: false
          schema:
            type: string
          example: unicorn-finder-service
        - name: name
          in: query
          description: 'Optional - allows filtering the output by repository name (the first part of the key before the .). Must match `^[a-z](-?[a-z0-9]+)*$`.'
          required: false
          schema:
            type: string
          example: some-service
        - name: type
          in: query
          description: 'Optional - allows filtering the output by repository type (the second part of the key after the .). Must currently be one of api, helm-chart, helm-deployment, implementation, terraform-module, javascript-module.'
          required: false
          schema:
            type: string
          example: helm-chart
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryListDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - /rest/api/v1/repositories
  '/rest/api/v1/repositories/{repository}':
    get:
      operationId: getRepository
      summary: get a single repository by key
      parameters:
        - name: repository
          in: path
          required: true
          schema:
            type: string
          example: unicorn-finder-service.implementation
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDto'
        '404':
          description: Owner or repository not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - /rest/api/v1/repositories
    post:
      operationId: registerRepository
      summary: register a new repository with the given key
      description: Register a new repository in the metadata. Note that this does not actually create it.
      parameters:
        - name: repository
          in: path
          required: true
          schema:
            type: string
          example: unicorn-finder-service.implementation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryCreateDto'
      responses:
        '201':
          description: Created
          headers:
            Location:
              schema:
                type: string
              example: /rest/api/v1/repositories/unicorn-finder-service.implementation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDto'
        '400':
          description: 'Unable to parse input (invalid repository key format, or the body failed to validate)'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: Conflict - this repository key already exists (may be under a different owner - repository keys are globally unique)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/repositories
    put:
      operationId: updateRepository
      summary: update an existing repository with the given key
      description: Update a repository
      parameters:
        - name: repository
          in: path
          required: true
          schema:
            type: string
          example: unicorn-finder-service.implementation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDto'
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - a repository with this key does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp, or you tried to move a repository to another owner while a service refers to it, in this case, please move the service instead'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/repositories
    patch:
      operationId: patchRepository
      summary: patch an existing repository with the given key
      description: Patch a repository.
      parameters:
        - name: repository
          in: path
          required: true
          schema:
            type: string
          example: unicorn-finder-service.implementation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RepositoryPatchDto'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDto'
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - a repository with this key does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, please retry the operation based on the current commit hash and timestamp'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RepositoryDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/repositories
    delete:
      operationId: removeRepository
      summary: remove the repository with the given key
      description: 'Delete a repository from metadata. Will not delete the actual repository, just the metadata.'
      parameters:
        - name: repository
          in: path
          required: true
          schema:
            type: string
          example: unicorn-finder-service.implementation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeletionDto'
      responses:
        '204':
          description: No Content - successfully deleted
        '400':
          description: Unable to parse input (the body failed to validate)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '401':
          description: Unauthorized (aka unauthenticated) - you need to provide the Authorization header with a bearer token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '403':
          description: Forbidden (aka unauthorized) - your bearer token did not grant you access to this operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '404':
          description: Not Found - a repository with this key does not exist
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '409':
          description: 'Conflict - concurrent update detected, git change could not be pushed. Please retry the operation based on the current data'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '500':
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
        '502':
          description: Bad gateway - a downstream error occurred
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorDto'
      security:
        - bearerAuth: []
        - basicAuth: []
      tags:
        - /rest/api/v1/repositories
  /health:
    get:
      operationId: getHealth
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HealthComponent'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - management
  /management/health:
    get:
      operationId: getHealth_1
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/HealthComponent'
        '500':
          description: Internal Server Error
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorDto'
      tags:
        - management
  /webhook:
    post:
      operationId: gitNotify
      description: webhook notification endpoint to be configured in the git server to notify the service that it should check for new commits
      responses:
        '204':
          description: No content
        '500':
          description: Internal Server Error
      tags:
        - webhook
  /webhook/bitbucket:
    post:
      operationId: gitNotifyBitBucket
      description: 'webhook notification endpoint to be configured in bitbucket server to notify the service that it should check for new commits, or that a PR needs to be validated'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              additionalProperties: true
      responses:
        '204':
          description: No content
        '400':
          description: Payload parse failure - need to send a valid BitBucket webhook payload
        '500':
          description: Internal Server Error
      tags:
        - webhook
components:
  schemas:
    OwnerDto:
      type: object
      properties:
        contact:
          description: The contact information of the owner
          type: string
          examples:
            - squad@some-organisation.com
        teamsChannelURL:
          description: The teams channel url information of the owner
          type: string
          examples:
            - 'https://teams.microsoft.com/l/channel/.....'
        productOwner:
          description: The product owner of this owner space
          type: string
          examples:
            - kschlangenheld
        groups:
          description: 'Map of string (group name e.g. some-owner) of strings (list of usernames), one username for each group is required.'
          type: object
          examples:
            - some-owner: {}
          additionalProperties:
            type: array
            items:
              type: string
        promoters:
          description: A list of users that are allowed to promote services in this owner space
          type: array
          items:
            type: string
            description: The username of a user allowed to promote services in this owner space
            examples:
              - kschlangenheld
          examples:
            - - kschlangenheld
              - someotheruser
        defaultJiraProject:
          description: The default jira project that is used by this owner space
          type: string
          examples:
            - LELTEC
        timeStamp:
          description: 'ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.'
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
        commitHash:
          description: 'The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.'
          type: string
          examples:
            - 6c8ac2c35791edf9979623c717a243fc53400000
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        displayName:
          description: 'A display name of the owner, to be presented in user interfaces instead of the owner''s name, when available'
          type: string
          examples:
            - Owner Display Name
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - contact
        - timeStamp
        - commitHash
        - jiraIssue
    OwnerCreateDto:
      type: object
      properties:
        contact:
          description: The contact information of the owner
          type: string
          examples:
            - squad@some-organisation.com
        teamsChannelURL:
          description: The teams channel url information of the owner
          type: string
          examples:
            - 'https://teams.microsoft.com/l/channel/.....'
        productOwner:
          description: The product owner of this owner space
          type: string
          examples:
            - kschlangenheld
        promoters:
          description: A list of users that are allowed to promote services in this owner space
          type: array
          items:
            type: string
            description: The username of a user allowed to promote services in this owner space
            examples:
              - kschlangenheld
          examples:
            - - kschlangenheld
              - someotheruser
        groups:
          description: 'Map of string (group name e.g. some-owner) of strings (list of usernames), one username for each group is required.'
          type: object
          examples:
            - some-owner:
                - someotheruser
          additionalProperties:
            type: array
            items:
              type: string
        defaultJiraProject:
          description: The default jira project that is used by this owner space
          type: string
          examples:
            - LELTEC
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        displayName:
          description: 'A display name of the owner, to be presented in user interfaces instead of the owner''s name, when available'
          type: string
          examples:
            - Owner Display Name
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - contact
        - jiraIssue
    OwnerPatchDto:
      type: object
      properties:
        contact:
          description: The contact information of the owner
          type: string
          examples:
            - squad@some-organisation.com
        teamsChannelURL:
          description: The teams channel url information of the owner
          type: string
          examples:
            - 'https://teams.microsoft.com/l/channel/.....'
        productOwner:
          description: The product owner of this owner space
          type: string
          examples:
            - kschlangenheld
        groups:
          description: 'Map of string (group name e.g. some-owner) of strings (list of usernames), one username for each group is required.'
          type: object
          examples:
            - some-owner: {}
          additionalProperties:
            type: array
            items:
              type: string
        promoters:
          description: A list of users that are allowed to promote services in this owner space
          type: array
          items:
            type: string
            description: The username of a user allowed to promote services in this owner space
            examples:
              - kschlangenheld
          examples:
            - - kschlangenheld
              - someotheruser
        defaultJiraProject:
          description: The default jira project that is used by this owner space
          type: string
          examples:
            - LELTEC
        timeStamp:
          description: 'ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.'
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
        commitHash:
          description: 'The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.'
          type: string
          examples:
            - 6c8ac2c35791edf9979623c717a243fc53400000
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        displayName:
          description: 'A display name of the owner, to be presented in user interfaces instead of the owner''s name, when available'
          type: string
          examples:
            - Owner Display Name
        links:
          type: array
          items:
            $ref: '#/components/schemas/Link'
      required:
        - timeStamp
        - commitHash
        - jiraIssue
    OwnerListDto:
      type: object
      properties:
        owners:
          type: object
          examples:
            - some-owner:
                contact: squad@some-organisation.com
                productOwner: kschlangenheld
                defaultJiraProject: LELTEC
                timeStamp: '2022-04-18T14:22:38Z'
          additionalProperties:
            $ref: '#/components/schemas/OwnerDto'
        timeStamp:
          description: ISO-8601 UTC date time at which the list of owners was obtained from service-metadata
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
      required:
        - owners
        - timeStamp
    ServiceDto:
      type: object
      properties:
        owner:
          description: 'The alias of the service owner. Note, an update with changed owner will move the service and any associated repositories to the new owner, but of course this will not move e.g. Jenkins jobs. That''s your job.'
          type: string
          examples:
            - some-owner
        description:
          description: A short description of the functionality of the service.
          type: string
        quicklinks:
          description: A list of quicklinks related to the service
          type: array
          items:
            $ref: '#/components/schemas/Quicklink'
          examples:
            - - url: /swagger-ui/index.html
                title: SwaggerUI
        repositories:
          description: 'The keys of repositories associated with the service. When sending an update, they must refer to repositories that belong to this service, or the update will fail'
          type: array
          items:
            type: string
            description: The key of a repository associated with the service
            examples:
              - unicorn-finder-service.implementation
        alertTarget:
          description: The default channel used to send any alerts of the service to. Can be an email address or a Teams webhook URL
          type: string
          examples:
            - somebody@some-organisation.com
        developmentOnly:
          description: True for services that will be permanently deployed to the Development environment only.
          type: boolean
          default: false
        operationType:
          description: 'The operation type of the service. ''WORKLOAD'' follows the default deployment strategy of one instance per environment, ''PLATFORM'' one instance per cluster or node and ''APPLICATION'' is a standalone application that is not deployed via the common strategies.'
          type: string
          default: WORKLOAD
          x-extensible-enum:
            - WORKLOAD
            - PLATFORM
            - APPLICATION
        internetExposed:
          description: The value defines if the service is available from the internet and the time period in which security holes must be processed.
          type: boolean
        tags:
          type: array
          items:
            type: string
          examples:
            - - some-tag
              - other-tag
        labels:
          type: object
          examples:
            - some-key: some-value
              other-key: other-value
          additionalProperties:
            type: string
        spec:
          $ref: '#/components/schemas/ServiceSpecDto'
        timeStamp:
          description: 'ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.'
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
        commitHash:
          description: 'The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.'
          type: string
          examples:
            - 6c8ac2c35791edf9979623c717a243fc53400000
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        lifecycle:
          description: 'The current phase of the service''s development. A service usually starts off as ''experimental'', then becomes ''operational'' (i. e. can be reliably used and/or consumed). Once ''deprecated'', the service doesn’t guarantee reliable use/consumption any longer and if ''decommissionable'', the service will soon cease to exist.'
          type: string
          examples:
            - operational
          enum:
            - experimental
            - operational
            - deprecated
            - decommissionable
      required:
        - owner
        - quicklinks
        - repositories
        - alertTarget
        - timeStamp
        - commitHash
        - jiraIssue
    ServiceCreateDto:
      type: object
      properties:
        owner:
          description: 'The alias of the service owner. Note, an update with changed owner will move the service and any associated repositories to the new owner, but of course this will not move e.g. Jenkins jobs. That''s your job.'
          type: string
          examples:
            - some-owner
        description:
          description: A short description of the functionality of the service.
          type: string
        quicklinks:
          description: A list of quicklinks related to the service
          type: array
          items:
            $ref: '#/components/schemas/Quicklink'
          examples:
            - - url: /swagger-ui/index.html
                title: SwaggerUI
        repositories:
          description: 'The keys of repositories associated with the service. When sending an update, they must refer to repositories that belong to this service, or the update will fail'
          type: array
          items:
            type: string
            description: The key of a repository associated with the service
            examples:
              - unicorn-finder-service.implementation
        alertTarget:
          description: The default channel used to send any alerts of the service to. Can be an email address or a Teams webhook URL
          type: string
          examples:
            - somebody@some-organisation.com
        developmentOnly:
          description: True for services that will be permanently deployed to the Development environment only.
          type: boolean
          default: false
        operationType:
          description: 'The operation type of the service. ''WORKLOAD'' follows the default deployment strategy of one instance per environment, ''PLATFORM'' one instance per cluster or node and ''APPLICATION'' is a standalone application that is not deployed via the common strategies.'
          type: string
          default: WORKLOAD
          x-extensible-enum:
            - WORKLOAD
            - PLATFORM
            - APPLICATION
        internetExposed:
          description: The value defines if the service is available from the internet and the time period in which security holes must be processed.
          type: boolean
        tags:
          type: array
          items:
            type: string
          examples:
            - - some-tag
              - other-tag
        labels:
          type: object
          examples:
            - some-key: some-value
              other-key: other-value
          additionalProperties:
            type: string
        spec:
          $ref: '#/components/schemas/ServiceSpecDto'
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
      required:
        - owner
        - quicklinks
        - repositories
        - alertTarget
        - jiraIssue
    ServicePatchDto:
      type: object
      properties:
        owner:
          description: 'The alias of the service owner. Note, a patch with changed owner will move the service and any associated repositories to the new owner, but of course this will not move e.g. Jenkins jobs. That''s your job.'
          type: string
          examples:
            - some-owner
        description:
          description: A short description of the functionality of the service.
          type: string
        quicklinks:
          description: A list of quicklinks related to the service
          type: array
          items:
            $ref: '#/components/schemas/Quicklink'
          examples:
            - - url: /swagger-ui/index.html
                title: SwaggerUI
        repositories:
          description: 'The keys of repositories associated with the service. When sending an update, they must refer to repositories that belong to this service, or the update will fail'
          type: array
          items:
            type: string
            description: The key of a repository associated with the service
            examples:
              - unicorn-finder-service.implementation
        alertTarget:
          description: The default channel used to send any alerts of the service to. Can be an email address or a Teams webhook URL
          type: string
          examples:
            - somebody@some-organisation.com
        developmentOnly:
          description: True for services that will be permanently deployed to the Development environment only.
          type: boolean
          default: false
        operationType:
          description: 'The operation type of the service. ''WORKLOAD'' follows the default deployment strategy of one instance per environment, ''PLATFORM'' one instance per cluster or node and ''APPLICATION'' is a standalone application that is not deployed via the common strategies.'
          type: string
          default: WORKLOAD
          x-extensible-enum:
            - WORKLOAD
            - PLATFORM
            - APPLICATION
        internetExposed:
          description: The value defines if the service is available from the internet and the time period in which security holes must be processed.
          type: boolean
        tags:
          type: array
          items:
            type: string
          examples:
            - - some-tag
              - other-tag
        labels:
          type: object
          examples:
            - some-key: some-value
              other-key: other-value
          additionalProperties:
            type: string
        spec:
          $ref: '#/components/schemas/ServiceSpecDto'
        timeStamp:
          description: 'ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.'
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
        commitHash:
          description: 'The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.'
          type: string
          examples:
            - 6c8ac2c35791edf9979623c717a243fc53400000
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        lifecycle:
          description: 'The current phase of the service''s development. A service usually starts off as ''experimental'', then becomes ''operational'' (i. e. can be reliably used and/or consumed). Once ''deprecated'', the service doesn’t guarantee reliable use/consumption any longer.'
          type: string
          examples:
            - operational
          enum:
            - experimental
            - operational
            - deprecated
      required:
        - timeStamp
        - commitHash
        - jiraIssue
    ServiceListDto:
      type: object
      properties:
        services:
          type: object
          examples:
            - unicorn-finder-service:
                quicklinks: []
                repositories:
                  - unicorn-finder-service.implementation
                  - unicorn-finder-service.helm-deployment
                alertTarget: somebody@some-organisation.com
                developmentOnly: false
                operationType: WORKLOAD
                timeStamp: '2022-04-18T14:22:38Z'
          additionalProperties:
            $ref: '#/components/schemas/ServiceDto'
        timeStamp:
          description: ISO-8601 UTC date time at which the list of services was obtained from service-metadata
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
      required:
        - services
        - timeStamp
    ServicePromotersDto:
      type: object
      properties:
        promoters:
          type: array
          items:
            type: string
          examples:
            - - user1
              - user2
      required:
        - promoters
    ServiceSpecDto:
      type: object
      properties:
        dependsOn:
          description: A relation denoting a dependency on another entity
          type: array
          items:
            type: string
          examples:
            - - some-service
              - other-service
        providesApis:
          description: 'A relation with an API, provided by this entity'
          type: array
          items:
            type: string
          examples:
            - - some-api
        consumesApis:
          description: 'A relation with an API, consumed by this entity'
          type: array
          items:
            type: string
          examples:
            - - some-api
              - other-api
    Notification:
      description: Schema of the Dto sent to all configured downstreams upon a change of service.
      type: object
      properties:
        name:
          description: name of the service that was updated
          type: string
        event:
          type: string
          enum:
            - CREATED
            - MODIFIED
            - DELETED
        type:
          type: string
          enum:
            - Owner
            - Service
            - Repository
        payload:
          type: object
          maxProperties: 1
          minProperties: 1
          properties:
            Owner:
              $ref: '#/components/schemas/OwnerDto'
            Service:
              $ref: '#/components/schemas/ServiceDto'
            Repository:
              $ref: '#/components/schemas/RepositoryDto'
      required:
        - name
        - type
        - event
    Quicklink:
      example:
        url: /swagger-ui/index.html
        title: SwaggerUI
        description: Displays the frontend for the API.
      allOf:
        - $ref: '#/components/schemas/Link'
        - type: object
          properties:
            description:
              type: string
    Link:
      description: 'A link '
      type: object
      properties:
        url:
          type: string
        title:
          type: string
      examples:
        - url: /swagger-ui/index.html
          title: SwaggerUI
    RepositoryDto:
      type: object
      properties:
        owner:
          description: The alias of the repository owner
          type: string
          examples:
            - some-owner
        url:
          type: string
        mainline:
          type: string
        generator:
          description: the generator used for the initial contents of this repository
          type: string
          examples:
            - java-spring-cloud
        unittest:
          description: this repository contains unit tests (currently ignored except for helm charts)
          type: boolean
          default: false
        configuration:
          $ref: '#/components/schemas/RepositoryConfigurationDto'
        filecategory:
          $ref: '#/components/schemas/RepositoryFileCategoriesDto'
        timeStamp:
          description: 'ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.'
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
        commitHash:
          description: 'The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.'
          type: string
          examples:
            - 6c8ac2c35791edf9979623c717a243fc53400000
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        labels:
          description: A map of arbitrary string labels attached to this repository.
          type: object
          examples:
            - some-key: some-value
              other-key: other-value
          additionalProperties:
            type: string
      required:
        - owner
        - url
        - mainline
        - timeStamp
        - commitHash
        - jiraIssue
    RepositoryCreateDto:
      type: object
      properties:
        owner:
          description: The alias of the repository owner
          type: string
          examples:
            - some-owner
        url:
          type: string
        mainline:
          type: string
        generator:
          description: the generator used for the initial contents of this repository
          type: string
          examples:
            - java-spring-cloud
        unittest:
          description: this repository contains unit tests (currently ignored except for helm charts)
          type: boolean
          default: false
        configuration:
          $ref: '#/components/schemas/RepositoryConfigurationDto'
        filecategory:
          $ref: '#/components/schemas/RepositoryFileCategoriesDto'
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        labels:
          description: A map of arbitrary string labels attached to this repository.
          type: object
          examples:
            - some-key: some-value
              other-key: other-value
          additionalProperties:
            type: string
      required:
        - owner
        - url
        - mainline
        - jiraIssue
    RepositoryPatchDto:
      type: object
      properties:
        owner:
          description: The alias of the repository owner
          type: string
          examples:
            - some-owner
        url:
          type: string
        mainline:
          type: string
        generator:
          description: the generator used for the initial contents of this repository
          type: string
          examples:
            - java-spring-cloud
        unittest:
          description: this repository contains unit tests (currently ignored except for helm charts)
          type: boolean
          default: false
        configuration:
          $ref: '#/components/schemas/RepositoryConfigurationDto'
        filecategory:
          $ref: '#/components/schemas/RepositoryFileCategoriesDto'
        timeStamp:
          description: 'ISO-8601 UTC date time at which this information was originally committed. When sending an update, include the original timestamp you got so we can detect concurrent updates.'
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
        commitHash:
          description: 'The git commit hash this information was originally committed under. When sending an update, include the original commitHash you got so we can detect concurrent updates.'
          type: string
          examples:
            - 6c8ac2c35791edf9979623c717a243fc53400000
        jiraIssue:
          description: 'The jira issue to use for committing a change, or the last jira issue used.'
          type: string
          examples:
            - ISSUE-0000
        labels:
          description: A map of arbitrary string labels attached to this repository.
          type: object
          examples:
            - some-key: some-value
              other-key: other-value
          additionalProperties:
            type: string
      required:
        - timeStamp
        - commitHash
        - jiraIssue
    RepositoryListDto:
      type: object
      properties:
        repositories:
          type: object
          examples:
            - unicorn-finder-service.helm-deployment:
                url: 'ssh://git@bitbucket.some-organisation.com:7999/UNICORNS/unicorn-finder-service-deployment.git'
                mainline: main
                configuration:
                  branchNameRegex: '(testing_[^_-]+_[^-]+$|development.*|production.*|versioncheck.*|renovate.*)'
                  commitMessageRegex: '(([A-Z][A-Z_0-9]+-[0-9]+)|(Ticket#[0-9]{16})[^0-9]|((SCTASK|INC|RITM|CHG)[0-9]{7}))(.|\n)*'
                  commitMessageType: DEFAULT
                  requireIssue: true
                  requireSuccessfulBuilds: 1
                  requireApprovals: 1
                  accessKeys:
                    - key: DEPLOYMENT
                      permission: REPO_READ
                  webhooks:
                    predefined:
                      - jenkinsPipeline
                    additional:
                      - name: trigger something
                        url: 'https://somejenkinspipeline'
                        events: []
                  approvers:
                    testing:
                      - user-one
                      - user-two
                  defaultReviewers: []
                  signedApprovers: []
                timeStamp: '2022-04-18T14:22:38Z'
              unicorn-finder-service.implementation:
                url: 'ssh://git@bitbucket.some-organisation.com:7999/UNICORNS/unicorn-finder-service.git'
                mainline: master
                timeStamp: '2022-04-18T14:22:38Z'
          additionalProperties:
            $ref: '#/components/schemas/RepositoryDto'
        timeStamp:
          description: ISO-8601 UTC date time at which the list of repositories was obtained from service-metadata
          type: string
          examples:
            - '2022-04-18T14:22:38Z'
      required:
        - repositories
        - timeStamp
    DeletionDto:
      type: object
      properties:
        jiraIssue:
          description: The jira issue to use for committing the deletion.
          type: string
          examples:
            - ISSUE-0000
      required:
        - jiraIssue
    RepositoryConfigurationDto:
      description: Attributes to configure the repository. If a configuration exists there are also some configured defaults for the repository.
      type: object
      properties:
        accessKeys:
          description: Ssh-Keys configured on the repository.
          type: array
          items:
            $ref: '#/components/schemas/RepositoryConfigurationAccessKeyDto'
        mergeConfig:
          type: object
          properties:
            defaultStrategy:
              $ref: '#/components/schemas/MergeStrategy'
            strategies:
              type: array
              items:
                $ref: '#/components/schemas/MergeStrategy'
        branchNameRegex:
          description: Use an explicit branch name regex.
          type: string
        commitMessageRegex:
          description: Use an explicit commit message regex.
          type: string
        commitMessageType:
          description: Adds a corresponding commit message regex.
          type: string
          enum:
            - DEFAULT
            - SEMANTIC
        refProtections:
          $ref: '#/components/schemas/RefProtections'
        requireIssue:
          description: 'Configures JQL matcher with query: issuetype in (Story, Bug) AND ''Risk Level'' is not EMPTY'
          type: boolean
        requireSuccessfulBuilds:
          description: Set the required successful builds counter.
          type: integer
        requireApprovals:
          description: Set the required approvals counter.
          type: integer
        excludeMergeCommits:
          description: Exclude merge commits from commit checks.
          type: boolean
        requireConditions:
          description: Configuration of conditional builds as map of structs (key name e.g. some-key) of target references.
          type: object
          examples:
            - some-key:
                refMatcher: main
          additionalProperties:
            $ref: '#/components/schemas/ConditionReferenceDto'
        webhooks:
          $ref: '#/components/schemas/RepositoryConfigurationWebhooksDto'
        approvers:
          description: 'Map of string (group name e.g. some-owner) of strings (list of approvers), one approval for each group is required.'
          type: object
          examples:
            - some-owner: {}
          additionalProperties:
            type: array
            items:
              type: string
        watchers:
          description: 'List of strings (list of watchers, either usernames or group identifier), which are added as reviewers but require no approval.'
          type: array
          items:
            type: string
          examples:
            - - someUser
              - anotherUser
              - '@owner.users'
        defaultReviewers:
          type: array
          items:
            type: string
        signedApprovers:
          description: 'List of users, who can sign a pull request.'
          type: array
          items:
            type: string
        archived:
          description: Moves the repository into the archive.
          type: boolean
        unmanaged:
          description: 'Repository will not be configured, also not archived.'
          type: boolean
    MergeStrategy:
      type: object
      properties:
        id:
          type: string
          examples:
            - - no-ff
              - ff
              - ff-only
              - squash
              - squash-ff-only
              - rebase-no-ff
              - rebase-ff-only
          enum:
            - no-ff
            - ff
            - ff-only
            - squash
            - squash-ff-only
            - rebase-no-ff
            - rebase-ff-only
      additionalProperties: false
      required:
        - id
      title: Strategy
    RepositoryConfigurationAccessKeyDto:
      properties:
        key:
          type: string
        data:
          type: string
        permission:
          type: string
          enum:
            - REPO_READ
            - REPO_WRITE
    RepositoryFileCategoriesDto:
      description: 'Assign a category to a list of files, e.g. to mark them for caching purposes. The key is the category name, and the value is a list of paths. Files are considered to have that category if their path is in the list.'
      type: object
      examples:
        - cache-template:
            - templates/template1.yaml
            - another/path/template2.json
      additionalProperties:
        type: array
        items:
          type: string
    ConditionReferenceDto:
      description: Configuration of conditional build references.
      type: object
      properties:
        refMatcher:
          description: Reference of a branch.
          type: string
      required:
        - refMatcher
    RepositoryConfigurationWebhooksDto:
      description: Webhooks configured to the repository.
      type: object
      properties:
        predefined:
          description: List of predefined webhooks
          type: array
          items:
            type: string
        additional:
          description: Additional webhooks to be configured.
          type: array
          items:
            $ref: '#/components/schemas/RepositoryConfigurationWebhookDto'
    RepositoryConfigurationWebhookDto:
      type: object
      properties:
        name:
          type: string
        url:
          type: string
        events:
          description: Events the webhook should be triggered with.
          type: array
          items:
            type: string
          examples:
            - 'repo:refs_changed, repo:modified, ...'
        configuration:
          type: object
          examples:
            - 'secret: ''<anysecret>'''
          additionalProperties:
            type: string
      required:
        - name
        - url
    RefProtections:
      type: object
      description: Configures available protections for git refs
      properties:
        branches:
          type: object
          properties:
            requirePR:
              description: Forces creating a PR to update the proteced refs.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventAllChanges:
              description: Prevents all changes of the proteced refs.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventCreation:
              description: Prevents creation of the proteced refs. Results in preventAllChanges for BitBucket.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventDeletion:
              description: Prevents deletion of the proteced refs.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventPush:
              description: Prevents pushes to the proteced refs. Results in preventAllChanges for BitBucket.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventForcePush:
              description: Prevents force pushes to the proteced refs for users with push permission.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
        tags:
          type: object
          properties:
            preventAllChanges:
              description: Prevents all changes of the proteced refs.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventCreation:
              description: Prevents creation of the proteced refs. Results in preventAllChanges for BitBucket.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventDeletion:
              description: Prevents deletion of the proteced refs.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
            preventForcePush:
              description: Prevents force pushes to the proteced refs for users with push permission.
              type: array
              items:
                $ref: '#/components/schemas/ProtectedRef'
    ProtectedRef:
      type: object
      required: [ pattern ]
      properties:
        pattern:
          type: string
          pattern: '^(?!refs\/(heads|tags)\/).*$'
          description: "fnmatch pattern to define protected refs. Must not start with refs/heads/ or refs/tags/. Special value :MAINLINE: matches the currently configured mainline for branch protections."
        exemptions:
          description: list of users, teams or apps for whom this protection does not apply
          type: array
          items:
            type: string
            description: 'A user, team or app identifier. Teams are identified by leading @<OWNER>. prefix, apps are identified by app: prefix.'
    ErrorDto:
      type: object
      properties:
        details:
          type: string
        message:
          type: string
        timestamp:
          type: string
          format: date-time
    HealthComponent:
      type: object
      properties:
        description:
          type: string
        status:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    basicAuth:
      type: http
      scheme: basic
tags:
  - name: /rest/api/v1/owners
  - name: /rest/api/v1/services
  - name: /rest/api/v1/repositories
  - name: management
  - name: webhook
