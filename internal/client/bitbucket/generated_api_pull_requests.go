/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 8.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucketclient

import (
    "context"
    "fmt"
    aurestclientapi "github.com/StephanHCB/go-autumn-restclient/api"
    "net/http"
    urlUtil "net/url"
    "strings"
)

type PullRequestsAPI interface {

    /*
       ApplySuggestion Apply pull request suggestion
    */
    ApplySuggestion(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, restApplySuggestionRequest RestApplySuggestionRequest) (aurestclientapi.ParsedResponse, error)

    // ApplySuggestionExecutes the request
    ApplySuggestionRequest(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIApplySuggestionRequest

    /*
       Approve Approve pull request
       Deprecated
    */
    Approve(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error)

    // ApproveExecutes the request
    // @return RestPullRequestParticipant
    // Deprecated
    ApproveRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIApproveRequest

    /*
       AssignParticipantRole Assign pull request participant role
    */
    AssignParticipantRole(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestAssignParticipantRoleRequest RestPullRequestAssignParticipantRoleRequest) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error)

    // AssignParticipantRoleExecutes the request
    // @return RestPullRequestParticipant
    AssignParticipantRoleRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIAssignParticipantRoleRequest

    /*
       CanMerge Test if pull request can be merged
    */
    CanMerge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestMergeability, aurestclientapi.ParsedResponse, error)

    // CanMergeExecutes the request
    // @return RestPullRequestMergeability
    CanMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICanMergeRequest

    /*
       CanRebase Check PR rebase precondition
    */
    CanRebase(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestRebaseability, aurestclientapi.ParsedResponse, error)

    // CanRebaseExecutes the request
    // @return RestPullRequestRebaseability
    CanRebaseRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICanRebaseRequest

    /*
       CancelAutoMerge Cancel auto-merge for pull request
    */
    CancelAutoMerge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // CancelAutoMergeExecutes the request
    CancelAutoMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICancelAutoMergeRequest

    /*
       Create Create pull request
    */
    Create(ctx context.Context, projectKey string, repositorySlug string, restPullRequest RestPullRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error)

    // CreateExecutes the request
    // @return RestPullRequest
    CreateRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPICreateRequest

    /*
       Create1 Create reviewer group
    */
    Create1(ctx context.Context, projectKey string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error)

    // Create1Executes the request
    // @return RestReviewerGroup
    Create1Request(ctx context.Context, projectKey string) PullRequestsAPICreate1Request

    /*
       Create2 Create reviewer group
    */
    Create2(ctx context.Context, projectKey string, repositorySlug string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error)

    // Create2Executes the request
    // @return RestReviewerGroup
    Create2Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPICreate2Request

    /*
       CreateComment1 Add new blocker comment
    */
    CreateComment1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error)

    // CreateComment1Executes the request
    // @return RestComment
    CreateComment1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICreateComment1Request

    /*
       CreateComment2 Add pull request comment
    */
    CreateComment2(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error)

    // CreateComment2Executes the request
    // @return RestComment
    CreateComment2Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICreateComment2Request

    /*
       CreatePullRequestCondition Create default reviewer
    */
    CreatePullRequestCondition(ctx context.Context, projectKey string, restDefaultReviewersRequest RestDefaultReviewersRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error)

    // CreatePullRequestConditionExecutes the request
    // @return RestPullRequestCondition
    CreatePullRequestConditionRequest(ctx context.Context, projectKey string) PullRequestsAPICreatePullRequestConditionRequest

    /*
       CreatePullRequestCondition1 Create default reviewers condition
    */
    CreatePullRequestCondition1(ctx context.Context, projectKey string, repositorySlug string, restDefaultReviewersRequest RestDefaultReviewersRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error)

    // CreatePullRequestCondition1Executes the request
    // @return RestPullRequestCondition
    CreatePullRequestCondition1Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPICreatePullRequestCondition1Request

    /*
       Decline Decline pull request
    */
    Decline(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestDeclineRequest RestPullRequestDeclineRequest, version string) (RestPullRequest, aurestclientapi.ParsedResponse, error)

    // DeclineExecutes the request
    // @return RestPullRequest
    DeclineRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIDeclineRequest

    /*
       Delete3 Delete pull request
    */
    Delete3(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestDeleteRequest RestPullRequestDeleteRequest) (aurestclientapi.ParsedResponse, error)

    // Delete3Executes the request
    Delete3Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIDelete3Request

    /*
       Delete6 Delete reviewer group
    */
    Delete6(ctx context.Context, projectKey string, id string) (aurestclientapi.ParsedResponse, error)

    // Delete6Executes the request
    Delete6Request(ctx context.Context, projectKey string, id string) PullRequestsAPIDelete6Request

    /*
       Delete7 Delete reviewer group
    */
    Delete7(ctx context.Context, projectKey string, id string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // Delete7Executes the request
    Delete7Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIDelete7Request

    /*
       DeleteComment1 Delete pull request comment
    */
    DeleteComment1(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, version string) (aurestclientapi.ParsedResponse, error)

    // DeleteComment1Executes the request
    DeleteComment1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIDeleteComment1Request

    /*
       DeleteComment2 Delete a pull request comment
    */
    DeleteComment2(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, version string) (aurestclientapi.ParsedResponse, error)

    // DeleteComment2Executes the request
    DeleteComment2Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIDeleteComment2Request

    /*
       DeletePullRequestCondition Remove default reviewer
    */
    DeletePullRequestCondition(ctx context.Context, projectKey string, id string) (aurestclientapi.ParsedResponse, error)

    // DeletePullRequestConditionExecutes the request
    DeletePullRequestConditionRequest(ctx context.Context, projectKey string, id string) PullRequestsAPIDeletePullRequestConditionRequest

    /*
       DeletePullRequestCondition1 Delete a default reviewer condition
    */
    DeletePullRequestCondition1(ctx context.Context, projectKey string, id int32, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // DeletePullRequestCondition1Executes the request
    DeletePullRequestCondition1Request(ctx context.Context, projectKey string, id int32, repositorySlug string) PullRequestsAPIDeletePullRequestCondition1Request

    /*
       DiscardReview Discard pull request review
    */
    DiscardReview(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // DiscardReviewExecutes the request
    DiscardReviewRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIDiscardReviewRequest

    /*
       FinishReview Complete pull request review
    */
    FinishReview(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestFinishReviewRequest RestPullRequestFinishReviewRequest, version string) (aurestclientapi.ParsedResponse, error)

    // FinishReviewExecutes the request
    FinishReviewRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIFinishReviewRequest

    /*
       Get3 Get pull request
    */
    Get3(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequest, aurestclientapi.ParsedResponse, error)

    // Get3Executes the request
    // @return RestPullRequest
    Get3Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGet3Request

    /*
       GetActivities Get pull request activity
    */
    GetActivities(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, fromType string, fromId string, start float32, limit float32) (GetActivities200Response, aurestclientapi.ParsedResponse, error)

    // GetActivitiesExecutes the request
    // @return GetActivities200Response
    GetActivitiesRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetActivitiesRequest

    /*
       GetAutoMergeRequest Get auto-merge request for pull request
    */
    GetAutoMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestAutoMergeRequest, aurestclientapi.ParsedResponse, error)

    // GetAutoMergeRequestExecutes the request
    // @return RestAutoMergeRequest
    GetAutoMergeRequestRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetAutoMergeRequestRequest

    /*
       GetComment1 Get pull request comment
    */
    GetComment1(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) (RestComment, aurestclientapi.ParsedResponse, error)

    // GetComment1Executes the request
    // @return RestComment
    GetComment1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComment1Request

    /*
       GetComment2 Get a pull request comment
    */
    GetComment2(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) (RestComment, aurestclientapi.ParsedResponse, error)

    // GetComment2Executes the request
    // @return RestComment
    GetComment2Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComment2Request

    /*
       GetComments1 Search pull request comments
    */
    GetComments1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, count string, state []string, states string, start float32, limit float32) (GetComments200Response, aurestclientapi.ParsedResponse, error)

    // GetComments1Executes the request
    // @return GetComments200Response
    GetComments1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComments1Request

    /*
       GetComments2 Get pull request comments for path
    */
    GetComments2(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, path string, fromHash string, anchorState string, diffType []string, toHash string, state []string, diffTypes string, states string, start float32, limit float32) (GetComments200Response, aurestclientapi.ParsedResponse, error)

    // GetComments2Executes the request
    // @return GetComments200Response
    GetComments2Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComments2Request

    /*
       GetCommitMessageSuggestion Get commit message suggestion
    */
    GetCommitMessageSuggestion(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestCommitMessageSuggestion, aurestclientapi.ParsedResponse, error)

    // GetCommitMessageSuggestionExecutes the request
    // @return RestCommitMessageSuggestion
    GetCommitMessageSuggestionRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetCommitMessageSuggestionRequest

    /*
       GetCommits1 Get pull request commits
    */
    GetCommits1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, avatarScheme string, withCounts string, avatarSize string, start float32, limit float32) (GetCommits200Response, aurestclientapi.ParsedResponse, error)

    // GetCommits1Executes the request
    // @return GetCommits200Response
    GetCommits1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetCommits1Request

    /*
       GetMergeBase1 Get the common ancestor between the latest commits of the source and target branches of the pull request
    */
    GetMergeBase1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestCommit, aurestclientapi.ParsedResponse, error)

    // GetMergeBase1Executes the request
    // @return RestCommit
    GetMergeBase1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetMergeBase1Request

    /*
       GetMergeConfig Get merge strategies
    */
    GetMergeConfig(ctx context.Context, scmId string) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error)

    // GetMergeConfigExecutes the request
    // @return RestPullRequestMergeConfig
    GetMergeConfigRequest(ctx context.Context, scmId string) PullRequestsAPIGetMergeConfigRequest

    /*
       GetPage Get pull requests for repository
    */
    GetPage(ctx context.Context, projectKey string, repositorySlug string, withAttributes string, at string, withProperties string, draft string, filterText string, state string, order string, direction string, start float32, limit float32) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error)

    // GetPageExecutes the request
    // @return GetPullRequests1200Response
    GetPageRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetPageRequest

    /*
       GetPullRequestConditions Get default reviewers
    */
    GetPullRequestConditions(ctx context.Context, projectKey string) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error)

    // GetPullRequestConditionsExecutes the request
    // @return []RestPullRequestCondition
    GetPullRequestConditionsRequest(ctx context.Context, projectKey string) PullRequestsAPIGetPullRequestConditionsRequest

    /*
       GetPullRequestConditions1 Get configured default reviewers
    */
    GetPullRequestConditions1(ctx context.Context, projectKey string, repositorySlug string) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error)

    // GetPullRequestConditions1Executes the request
    // @return []RestPullRequestCondition
    GetPullRequestConditions1Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetPullRequestConditions1Request

    /*
       GetPullRequests Get repository pull requests containing commit
    */
    GetPullRequests(ctx context.Context, projectKey string, commitId string, repositorySlug string, start float32, limit float32) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error)

    // GetPullRequestsExecutes the request
    // @return GetPullRequests1200Response
    GetPullRequestsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) PullRequestsAPIGetPullRequestsRequest

    /*
       GetReview Get pull request comment thread
    */
    GetReview(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, start float32, limit float32) (GetComments200Response, aurestclientapi.ParsedResponse, error)

    // GetReviewExecutes the request
    // @return GetComments200Response
    GetReviewRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetReviewRequest

    /*
       GetReviewerGroup Get reviewer group
    */
    GetReviewerGroup(ctx context.Context, projectKey string, id string) (RestReviewerGroup, aurestclientapi.ParsedResponse, error)

    // GetReviewerGroupExecutes the request
    // @return RestReviewerGroup
    GetReviewerGroupRequest(ctx context.Context, projectKey string, id string) PullRequestsAPIGetReviewerGroupRequest

    /*
       GetReviewerGroup1 Get reviewer group
    */
    GetReviewerGroup1(ctx context.Context, projectKey string, id string, repositorySlug string) (RestReviewerGroup, aurestclientapi.ParsedResponse, error)

    // GetReviewerGroup1Executes the request
    // @return RestReviewerGroup
    GetReviewerGroup1Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIGetReviewerGroup1Request

    /*
       GetReviewerGroups Get all reviewer groups
    */
    GetReviewerGroups(ctx context.Context, projectKey string, start float32, limit float32) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error)

    // GetReviewerGroupsExecutes the request
    // @return GetReviewerGroups1200Response
    GetReviewerGroupsRequest(ctx context.Context, projectKey string) PullRequestsAPIGetReviewerGroupsRequest

    /*
       GetReviewerGroups1 Get all reviewer groups
    */
    GetReviewerGroups1(ctx context.Context, projectKey string, repositorySlug string, start float32, limit float32) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error)

    // GetReviewerGroups1Executes the request
    // @return GetReviewerGroups1200Response
    GetReviewerGroups1Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetReviewerGroups1Request

    /*
       GetReviewers Get required reviewers for PR creation
    */
    GetReviewers(ctx context.Context, projectKey string, repositorySlug string, targetRepoId string, sourceRepoId string, sourceRefId string, targetRefId string) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error)

    // GetReviewersExecutes the request
    // @return []RestPullRequestCondition
    GetReviewersRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetReviewersRequest

    /*
       GetUsers Get reviewer group users
    */
    GetUsers(ctx context.Context, projectKey string, id string, repositorySlug string) ([]RestApplicationUser, aurestclientapi.ParsedResponse, error)

    // GetUsersExecutes the request
    // @return []RestApplicationUser
    GetUsersRequest(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIGetUsersRequest

    /*
       ListParticipants Get pull request participants
    */
    ListParticipants(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, start float32, limit float32) (ListParticipants200Response, aurestclientapi.ParsedResponse, error)

    // ListParticipantsExecutes the request
    // @return ListParticipants200Response
    ListParticipantsRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIListParticipantsRequest

    /*
       Merge Merge pull request
    */
    Merge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestMergeRequest RestPullRequestMergeRequest, version string) (RestPullRequest, aurestclientapi.ParsedResponse, error)

    // MergeExecutes the request
    // @return RestPullRequest
    MergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIMergeRequest

    /*
       React1 React to a PR comment
    */
    React1(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) (RestUserReaction, aurestclientapi.ParsedResponse, error)

    // React1Executes the request
    // @return RestUserReaction
    React1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) PullRequestsAPIReact1Request

    /*
       Rebase Rebase pull request
    */
    Rebase(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestRebaseRequest RestPullRequestRebaseRequest) (RestPullRequestRebaseResult, aurestclientapi.ParsedResponse, error)

    // RebaseExecutes the request
    // @return RestPullRequestRebaseResult
    RebaseRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIRebaseRequest

    /*
       Reopen Re-open pull request
    */
    Reopen(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestReopenRequest RestPullRequestReopenRequest, version string) (RestPullRequest, aurestclientapi.ParsedResponse, error)

    // ReopenExecutes the request
    // @return RestPullRequest
    ReopenRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIReopenRequest

    /*
       Search Search pull request participants
    */
    Search(ctx context.Context, projectKey string, repositorySlug string, filter string, role string, direction string, start float32, limit float32) (GetLikers200Response, aurestclientapi.ParsedResponse, error)

    // SearchExecutes the request
    // @return GetLikers200Response
    SearchRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPISearchRequest

    /*
       SetMergeConfig Update merge strategies
    */
    SetMergeConfig(ctx context.Context, scmId string, restPullRequestSettings RestPullRequestSettings) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error)

    // SetMergeConfigExecutes the request
    // @return RestPullRequestMergeConfig
    SetMergeConfigRequest(ctx context.Context, scmId string) PullRequestsAPISetMergeConfigRequest

    /*
       StreamChanges1 Gets pull request changes
    */
    StreamChanges1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, sinceId string, changeScope string, untilId string, withComments string, start float32, limit float32) (RestChange, aurestclientapi.ParsedResponse, error)

    // StreamChanges1Executes the request
    // @return RestChange
    StreamChanges1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamChanges1Request

    /*
       StreamDiff2 Stream a diff within a pull request
    */
    StreamDiff2(ctx context.Context, path string, projectKey string, pullRequestId string, repositorySlug string, avatarScheme string, contextLines string, sinceId string, srcPath string, diffType string, untilId string, whitespace string, withComments string, avatarSize string, start float32, limit float32) (StreamDiff1200Response, aurestclientapi.ParsedResponse, error)

    // StreamDiff2Executes the request
    // @return StreamDiff1200Response
    StreamDiff2Request(ctx context.Context, path string, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamDiff2Request

    /*
       StreamPatch1 Stream pull request as patch
    */
    StreamPatch1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // StreamPatch1Executes the request
    StreamPatch1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamPatch1Request

    /*
       StreamRawDiff2 Stream raw pull request diff
    */
    StreamRawDiff2(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, contextLines string, whitespace string) (aurestclientapi.ParsedResponse, error)

    // StreamRawDiff2Executes the request
    StreamRawDiff2Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamRawDiff2Request

    /*
       TryAutoMerge Auto-merge pull request
    */
    TryAutoMerge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestAutoMergeProcessingResult, aurestclientapi.ParsedResponse, error)

    // TryAutoMergeExecutes the request
    // @return RestAutoMergeProcessingResult
    TryAutoMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPITryAutoMergeRequest

    /*
       UnReact1 Remove a reaction from a PR comment
    */
    UnReact1(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // UnReact1Executes the request
    UnReact1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) PullRequestsAPIUnReact1Request

    /*
       UnassignParticipantRole Unassign pull request participant
    */
    UnassignParticipantRole(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // UnassignParticipantRoleExecutes the request
    UnassignParticipantRoleRequest(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string) PullRequestsAPIUnassignParticipantRoleRequest

    /*
       UnassignParticipantRole1 Unassign pull request participant
       Deprecated
    */
    UnassignParticipantRole1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, username string) (aurestclientapi.ParsedResponse, error)

    // UnassignParticipantRole1Executes the request
    // Deprecated
    UnassignParticipantRole1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIUnassignParticipantRole1Request

    /*
       Unwatch1 Stop watching pull request
    */
    Unwatch1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // Unwatch1Executes the request
    Unwatch1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIUnwatch1Request

    /*
       Update Update pull request metadata
    */
    Update(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequest RestPullRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error)

    // UpdateExecutes the request
    // @return RestPullRequest
    UpdateRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateRequest

    /*
       Update1 Update reviewer group attributes
    */
    Update1(ctx context.Context, projectKey string, id string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error)

    // Update1Executes the request
    // @return RestReviewerGroup
    Update1Request(ctx context.Context, projectKey string, id string) PullRequestsAPIUpdate1Request

    /*
       Update2 Update reviewer group attributes
    */
    Update2(ctx context.Context, projectKey string, id string, repositorySlug string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error)

    // Update2Executes the request
    // @return RestReviewerGroup
    Update2Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIUpdate2Request

    /*
       UpdateComment1 Update pull request comment
    */
    UpdateComment1(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error)

    // UpdateComment1Executes the request
    // @return RestComment
    UpdateComment1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateComment1Request

    /*
       UpdateComment2 Update pull request comment
    */
    UpdateComment2(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error)

    // UpdateComment2Executes the request
    // @return RestComment
    UpdateComment2Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateComment2Request

    /*
       UpdatePullRequestCondition Update the default reviewer
    */
    UpdatePullRequestCondition(ctx context.Context, projectKey string, id string, restDefaultReviewersRequest RestDefaultReviewersRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error)

    // UpdatePullRequestConditionExecutes the request
    // @return RestPullRequestCondition
    UpdatePullRequestConditionRequest(ctx context.Context, projectKey string, id string) PullRequestsAPIUpdatePullRequestConditionRequest

    /*
       UpdatePullRequestCondition1 Update a default reviewer condition
    */
    UpdatePullRequestCondition1(ctx context.Context, projectKey string, id string, repositorySlug string, updatePullRequestCondition1Request UpdatePullRequestCondition1Request) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error)

    // UpdatePullRequestCondition1Executes the request
    // @return RestPullRequestCondition
    UpdatePullRequestCondition1Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIUpdatePullRequestCondition1Request

    /*
       UpdateStatus Change pull request status
    */
    UpdateStatus(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string, restPullRequestAssignStatusRequest RestPullRequestAssignStatusRequest, version string) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error)

    // UpdateStatusExecutes the request
    // @return RestPullRequestParticipant
    UpdateStatusRequest(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateStatusRequest

    /*
       Watch1 Watch pull request
    */
    Watch1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // Watch1Executes the request
    Watch1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIWatch1Request

    /*
       WithdrawApproval Unapprove pull request
       Deprecated
    */
    WithdrawApproval(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error)

    // WithdrawApprovalExecutes the request
    // @return RestPullRequestParticipant
    // Deprecated
    WithdrawApprovalRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIWithdrawApprovalRequest
}

 type PullRequestsAPIApplySuggestionRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    repositorySlug string
    restApplySuggestionRequest *RestApplySuggestionRequest
}

    // A request containing other parameters required to apply a suggestion - The given versions/hashes must match the server&#39;s version/hashes or the suggestion application will fail (in order to avoid applying the suggestion to the wrong place
func (r *PullRequestsAPIApplySuggestionRequest) RestApplySuggestionRequest(restApplySuggestionRequest RestApplySuggestionRequest) *PullRequestsAPIApplySuggestionRequest {
    r.restApplySuggestionRequest = &restApplySuggestionRequest
    return r
}

func (r *PullRequestsAPIApplySuggestionRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.ApplySuggestionExecute(r)
}

func (a *PullRequestsAPIRepository) ApplySuggestionRequest(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIApplySuggestionRequest {
    return PullRequestsAPIApplySuggestionRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) ApplySuggestionExecute(r *PullRequestsAPIApplySuggestionRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/apply-suggestion"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeApplySuggestionCall(r.ctx, requestURL, r.restApplySuggestionRequest)
}

func (a *PullRequestsAPIRepository) ApplySuggestion(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, restApplySuggestionRequest RestApplySuggestionRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/apply-suggestion"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeApplySuggestionCall(ctx, requestURL, restApplySuggestionRequest)
}

func (a *PullRequestsAPIRepository) makeApplySuggestionCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIApproveRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIApproveRequest) Execute() (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.ApproveExecute(r)
}

func (a *PullRequestsAPIRepository) ApproveRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIApproveRequest {
    return PullRequestsAPIApproveRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

// Deprecated
func (a *PullRequestsAPIRepository) ApproveExecute(r *PullRequestsAPIApproveRequest) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeApproveCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) Approve(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeApproveCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeApproveCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequestParticipant
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestParticipant](&response)
        if err == nil {
            result = response.Body.(RestPullRequestParticipant)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIAssignParticipantRoleRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    restPullRequestAssignParticipantRoleRequest *RestPullRequestAssignParticipantRoleRequest
}

    // The participant to be added to the pull request, includes the user and their role
func (r *PullRequestsAPIAssignParticipantRoleRequest) RestPullRequestAssignParticipantRoleRequest(restPullRequestAssignParticipantRoleRequest RestPullRequestAssignParticipantRoleRequest) *PullRequestsAPIAssignParticipantRoleRequest {
    r.restPullRequestAssignParticipantRoleRequest = &restPullRequestAssignParticipantRoleRequest
    return r
}

func (r *PullRequestsAPIAssignParticipantRoleRequest) Execute() (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.AssignParticipantRoleExecute(r)
}

func (a *PullRequestsAPIRepository) AssignParticipantRoleRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIAssignParticipantRoleRequest {
    return PullRequestsAPIAssignParticipantRoleRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) AssignParticipantRoleExecute(r *PullRequestsAPIAssignParticipantRoleRequest) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeAssignParticipantRoleCall(r.ctx, requestURL, r.restPullRequestAssignParticipantRoleRequest)
}

func (a *PullRequestsAPIRepository) AssignParticipantRole(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestAssignParticipantRoleRequest RestPullRequestAssignParticipantRoleRequest) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeAssignParticipantRoleCall(ctx, requestURL, restPullRequestAssignParticipantRoleRequest)
}

func (a *PullRequestsAPIRepository) makeAssignParticipantRoleCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequestParticipant
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestParticipant](&response)
        if err == nil {
            result = response.Body.(RestPullRequestParticipant)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICanMergeRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPICanMergeRequest) Execute() (RestPullRequestMergeability, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CanMergeExecute(r)
}

func (a *PullRequestsAPIRepository) CanMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICanMergeRequest {
    return PullRequestsAPICanMergeRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) CanMergeExecute(r *PullRequestsAPICanMergeRequest) (RestPullRequestMergeability, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCanMergeCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) CanMerge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestMergeability, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCanMergeCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeCanMergeCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestMergeability, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestPullRequestMergeability
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestMergeability](&response)
        if err == nil {
            result = response.Body.(RestPullRequestMergeability)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICanRebaseRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPICanRebaseRequest) Execute() (RestPullRequestRebaseability, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CanRebaseExecute(r)
}

func (a *PullRequestsAPIRepository) CanRebaseRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICanRebaseRequest {
    return PullRequestsAPICanRebaseRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) CanRebaseExecute(r *PullRequestsAPICanRebaseRequest) (RestPullRequestRebaseability, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/git/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/rebase"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCanRebaseCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) CanRebase(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestRebaseability, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/git/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/rebase"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCanRebaseCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeCanRebaseCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestRebaseability, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestPullRequestRebaseability
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestRebaseability](&response)
        if err == nil {
            result = response.Body.(RestPullRequestRebaseability)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICancelAutoMergeRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPICancelAutoMergeRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CancelAutoMergeExecute(r)
}

func (a *PullRequestsAPIRepository) CancelAutoMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICancelAutoMergeRequest {
    return PullRequestsAPICancelAutoMergeRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) CancelAutoMergeExecute(r *PullRequestsAPICancelAutoMergeRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCancelAutoMergeCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) CancelAutoMerge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCancelAutoMergeCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeCancelAutoMergeCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPICreateRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
    restPullRequest *RestPullRequest
}

    // The pull request data
func (r *PullRequestsAPICreateRequest) RestPullRequest(restPullRequest RestPullRequest) *PullRequestsAPICreateRequest {
    r.restPullRequest = &restPullRequest
    return r
}

func (r *PullRequestsAPICreateRequest) Execute() (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CreateExecute(r)
}

func (a *PullRequestsAPIRepository) CreateRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPICreateRequest {
    return PullRequestsAPICreateRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) CreateExecute(r *PullRequestsAPICreateRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateCall(r.ctx, requestURL, r.restPullRequest)
}

func (a *PullRequestsAPIRepository) Create(ctx context.Context, projectKey string, repositorySlug string, restPullRequest RestPullRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateCall(ctx, requestURL, restPullRequest)
}

func (a *PullRequestsAPIRepository) makeCreateCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequest
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequest](&response)
        if err == nil {
            result = response.Body.(RestPullRequest)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICreate1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    restReviewerGroup *RestReviewerGroup
}

    // The reviewer group to be create
func (r *PullRequestsAPICreate1Request) RestReviewerGroup(restReviewerGroup RestReviewerGroup) *PullRequestsAPICreate1Request {
    r.restReviewerGroup = &restReviewerGroup
    return r
}

func (r *PullRequestsAPICreate1Request) Execute() (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Create1Execute(r)
}

func (a *PullRequestsAPIRepository) Create1Request(ctx context.Context, projectKey string) PullRequestsAPICreate1Request {
    return PullRequestsAPICreate1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
    }
}

func (a *PullRequestsAPIRepository) Create1Execute(r *PullRequestsAPICreate1Request) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreate1Call(r.ctx, requestURL, r.restReviewerGroup)
}

func (a *PullRequestsAPIRepository) Create1(ctx context.Context, projectKey string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreate1Call(ctx, requestURL, restReviewerGroup)
}

func (a *PullRequestsAPIRepository) makeCreate1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestReviewerGroup
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestReviewerGroup](&response)
        if err == nil {
            result = response.Body.(RestReviewerGroup)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICreate2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
    restReviewerGroup *RestReviewerGroup
}

    // The request containing the details of the reviewer group.
func (r *PullRequestsAPICreate2Request) RestReviewerGroup(restReviewerGroup RestReviewerGroup) *PullRequestsAPICreate2Request {
    r.restReviewerGroup = &restReviewerGroup
    return r
}

func (r *PullRequestsAPICreate2Request) Execute() (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Create2Execute(r)
}

func (a *PullRequestsAPIRepository) Create2Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPICreate2Request {
    return PullRequestsAPICreate2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) Create2Execute(r *PullRequestsAPICreate2Request) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreate2Call(r.ctx, requestURL, r.restReviewerGroup)
}

func (a *PullRequestsAPIRepository) Create2(ctx context.Context, projectKey string, repositorySlug string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreate2Call(ctx, requestURL, restReviewerGroup)
}

func (a *PullRequestsAPIRepository) makeCreate2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestReviewerGroup
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestReviewerGroup](&response)
        if err == nil {
            result = response.Body.(RestReviewerGroup)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICreateComment1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    restComment *RestComment
}

    // The comment to add.
func (r *PullRequestsAPICreateComment1Request) RestComment(restComment RestComment) *PullRequestsAPICreateComment1Request {
    r.restComment = &restComment
    return r
}

func (r *PullRequestsAPICreateComment1Request) Execute() (RestComment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CreateComment1Execute(r)
}

func (a *PullRequestsAPIRepository) CreateComment1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICreateComment1Request {
    return PullRequestsAPICreateComment1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) CreateComment1Execute(r *PullRequestsAPICreateComment1Request) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateComment1Call(r.ctx, requestURL, r.restComment)
}

func (a *PullRequestsAPIRepository) CreateComment1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateComment1Call(ctx, requestURL, restComment)
}

func (a *PullRequestsAPIRepository) makeCreateComment1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestComment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestComment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestComment](&response)
        if err == nil {
            result = response.Body.(RestComment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICreateComment2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    restComment *RestComment
}

    // The comment to add
func (r *PullRequestsAPICreateComment2Request) RestComment(restComment RestComment) *PullRequestsAPICreateComment2Request {
    r.restComment = &restComment
    return r
}

func (r *PullRequestsAPICreateComment2Request) Execute() (RestComment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CreateComment2Execute(r)
}

func (a *PullRequestsAPIRepository) CreateComment2Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPICreateComment2Request {
    return PullRequestsAPICreateComment2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) CreateComment2Execute(r *PullRequestsAPICreateComment2Request) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateComment2Call(r.ctx, requestURL, r.restComment)
}

func (a *PullRequestsAPIRepository) CreateComment2(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateComment2Call(ctx, requestURL, restComment)
}

func (a *PullRequestsAPIRepository) makeCreateComment2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestComment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestComment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestComment](&response)
        if err == nil {
            result = response.Body.(RestComment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICreatePullRequestConditionRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    restDefaultReviewersRequest *RestDefaultReviewersRequest
}

    // The details needed to create a default reviewer pull request condition.
func (r *PullRequestsAPICreatePullRequestConditionRequest) RestDefaultReviewersRequest(restDefaultReviewersRequest RestDefaultReviewersRequest) *PullRequestsAPICreatePullRequestConditionRequest {
    r.restDefaultReviewersRequest = &restDefaultReviewersRequest
    return r
}

func (r *PullRequestsAPICreatePullRequestConditionRequest) Execute() (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CreatePullRequestConditionExecute(r)
}

func (a *PullRequestsAPIRepository) CreatePullRequestConditionRequest(ctx context.Context, projectKey string) PullRequestsAPICreatePullRequestConditionRequest {
    return PullRequestsAPICreatePullRequestConditionRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
    }
}

func (a *PullRequestsAPIRepository) CreatePullRequestConditionExecute(r *PullRequestsAPICreatePullRequestConditionRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/condition"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreatePullRequestConditionCall(r.ctx, requestURL, r.restDefaultReviewersRequest)
}

func (a *PullRequestsAPIRepository) CreatePullRequestCondition(ctx context.Context, projectKey string, restDefaultReviewersRequest RestDefaultReviewersRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/condition"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreatePullRequestConditionCall(ctx, requestURL, restDefaultReviewersRequest)
}

func (a *PullRequestsAPIRepository) makeCreatePullRequestConditionCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequestCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestCondition](&response)
        if err == nil {
            result = response.Body.(RestPullRequestCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPICreatePullRequestCondition1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
    restDefaultReviewersRequest *RestDefaultReviewersRequest
}

    // The details needed to create a default reviewer pull request condition.
func (r *PullRequestsAPICreatePullRequestCondition1Request) RestDefaultReviewersRequest(restDefaultReviewersRequest RestDefaultReviewersRequest) *PullRequestsAPICreatePullRequestCondition1Request {
    r.restDefaultReviewersRequest = &restDefaultReviewersRequest
    return r
}

func (r *PullRequestsAPICreatePullRequestCondition1Request) Execute() (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CreatePullRequestCondition1Execute(r)
}

func (a *PullRequestsAPIRepository) CreatePullRequestCondition1Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPICreatePullRequestCondition1Request {
    return PullRequestsAPICreatePullRequestCondition1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) CreatePullRequestCondition1Execute(r *PullRequestsAPICreatePullRequestCondition1Request) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreatePullRequestCondition1Call(r.ctx, requestURL, r.restDefaultReviewersRequest)
}

func (a *PullRequestsAPIRepository) CreatePullRequestCondition1(ctx context.Context, projectKey string, repositorySlug string, restDefaultReviewersRequest RestDefaultReviewersRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreatePullRequestCondition1Call(ctx, requestURL, restDefaultReviewersRequest)
}

func (a *PullRequestsAPIRepository) makeCreatePullRequestCondition1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequestCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestCondition](&response)
        if err == nil {
            result = response.Body.(RestPullRequestCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIDeclineRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    version *string
    restPullRequestDeclineRequest *RestPullRequestDeclineRequest
}

    // The current version of the pull request. If the server&#39;s version isn&#39;t the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the &#39;version&#39; attribute in the returned JSON structure.
func (r *PullRequestsAPIDeclineRequest) Version(version string) *PullRequestsAPIDeclineRequest {
    r.version = &version
    return r
}

    // The body holder
func (r *PullRequestsAPIDeclineRequest) RestPullRequestDeclineRequest(restPullRequestDeclineRequest RestPullRequestDeclineRequest) *PullRequestsAPIDeclineRequest {
    r.restPullRequestDeclineRequest = &restPullRequestDeclineRequest
    return r
}

func (r *PullRequestsAPIDeclineRequest) Execute() (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeclineExecute(r)
}

func (a *PullRequestsAPIRepository) DeclineRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIDeclineRequest {
    return PullRequestsAPIDeclineRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) DeclineExecute(r *PullRequestsAPIDeclineRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.version!=nil {
        withUrlQueryParam(requestURL, "version", *r.version)
    }
    return a.makeDeclineCall(r.ctx, requestURL, r.restPullRequestDeclineRequest)
}

func (a *PullRequestsAPIRepository) Decline(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestDeclineRequest RestPullRequestDeclineRequest, version string) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/decline"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "version", version)
    return a.makeDeclineCall(ctx, requestURL, restPullRequestDeclineRequest)
}

func (a *PullRequestsAPIRepository) makeDeclineCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequest
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequest](&response)
        if err == nil {
            result = response.Body.(RestPullRequest)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIDelete3Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    restPullRequestDeleteRequest *RestPullRequestDeleteRequest
}

    // A body containing the version of the pull request
func (r *PullRequestsAPIDelete3Request) RestPullRequestDeleteRequest(restPullRequestDeleteRequest RestPullRequestDeleteRequest) *PullRequestsAPIDelete3Request {
    r.restPullRequestDeleteRequest = &restPullRequestDeleteRequest
    return r
}

func (r *PullRequestsAPIDelete3Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Delete3Execute(r)
}

func (a *PullRequestsAPIRepository) Delete3Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIDelete3Request {
    return PullRequestsAPIDelete3Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) Delete3Execute(r *PullRequestsAPIDelete3Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDelete3Call(r.ctx, requestURL, r.restPullRequestDeleteRequest)
}

func (a *PullRequestsAPIRepository) Delete3(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestDeleteRequest RestPullRequestDeleteRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDelete3Call(ctx, requestURL, restPullRequestDeleteRequest)
}

func (a *PullRequestsAPIRepository) makeDelete3Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIDelete6Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
}

func (r *PullRequestsAPIDelete6Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Delete6Execute(r)
}

func (a *PullRequestsAPIRepository) Delete6Request(ctx context.Context, projectKey string, id string) PullRequestsAPIDelete6Request {
    return PullRequestsAPIDelete6Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
    }
}

func (a *PullRequestsAPIRepository) Delete6Execute(r *PullRequestsAPIDelete6Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDelete6Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) Delete6(ctx context.Context, projectKey string, id string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDelete6Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeDelete6Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIDelete7Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
    repositorySlug string
}

func (r *PullRequestsAPIDelete7Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Delete7Execute(r)
}

func (a *PullRequestsAPIRepository) Delete7Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIDelete7Request {
    return PullRequestsAPIDelete7Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) Delete7Execute(r *PullRequestsAPIDelete7Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDelete7Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) Delete7(ctx context.Context, projectKey string, id string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDelete7Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeDelete7Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIDeleteComment1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    repositorySlug string
    version *string
}

    // The expected version of the comment. This must match the server&#39;s version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the &#39;version&#39; attribute in the returned JSON structure.
func (r *PullRequestsAPIDeleteComment1Request) Version(version string) *PullRequestsAPIDeleteComment1Request {
    r.version = &version
    return r
}

func (r *PullRequestsAPIDeleteComment1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeleteComment1Execute(r)
}

func (a *PullRequestsAPIRepository) DeleteComment1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIDeleteComment1Request {
    return PullRequestsAPIDeleteComment1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) DeleteComment1Execute(r *PullRequestsAPIDeleteComment1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.version!=nil {
        withUrlQueryParam(requestURL, "version", *r.version)
    }
    return a.makeDeleteComment1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) DeleteComment1(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, version string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "version", version)
    return a.makeDeleteComment1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeDeleteComment1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIDeleteComment2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    repositorySlug string
    version *string
}

    // The expected version of the comment. This must match the server&#39;s version of the comment or the delete will fail. To determine the current version of the comment, the comment should be fetched from the server prior to the delete. Look for the &#39;version&#39; attribute in the returned JSON structure.
func (r *PullRequestsAPIDeleteComment2Request) Version(version string) *PullRequestsAPIDeleteComment2Request {
    r.version = &version
    return r
}

func (r *PullRequestsAPIDeleteComment2Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeleteComment2Execute(r)
}

func (a *PullRequestsAPIRepository) DeleteComment2Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIDeleteComment2Request {
    return PullRequestsAPIDeleteComment2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) DeleteComment2Execute(r *PullRequestsAPIDeleteComment2Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.version!=nil {
        withUrlQueryParam(requestURL, "version", *r.version)
    }
    return a.makeDeleteComment2Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) DeleteComment2(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, version string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "version", version)
    return a.makeDeleteComment2Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeDeleteComment2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIDeletePullRequestConditionRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
}

func (r *PullRequestsAPIDeletePullRequestConditionRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeletePullRequestConditionExecute(r)
}

func (a *PullRequestsAPIRepository) DeletePullRequestConditionRequest(ctx context.Context, projectKey string, id string) PullRequestsAPIDeletePullRequestConditionRequest {
    return PullRequestsAPIDeletePullRequestConditionRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
    }
}

func (a *PullRequestsAPIRepository) DeletePullRequestConditionExecute(r *PullRequestsAPIDeletePullRequestConditionRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeletePullRequestConditionCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) DeletePullRequestCondition(ctx context.Context, projectKey string, id string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeletePullRequestConditionCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeDeletePullRequestConditionCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIDeletePullRequestCondition1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id int32
    repositorySlug string
}

func (r *PullRequestsAPIDeletePullRequestCondition1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeletePullRequestCondition1Execute(r)
}

func (a *PullRequestsAPIRepository) DeletePullRequestCondition1Request(ctx context.Context, projectKey string, id int32, repositorySlug string) PullRequestsAPIDeletePullRequestCondition1Request {
    return PullRequestsAPIDeletePullRequestCondition1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) DeletePullRequestCondition1Execute(r *PullRequestsAPIDeletePullRequestCondition1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(parameterValueToString(r.id)))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeletePullRequestCondition1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) DeletePullRequestCondition1(ctx context.Context, projectKey string, id int32, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(parameterValueToString(id)))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeletePullRequestCondition1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeDeletePullRequestCondition1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIDiscardReviewRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIDiscardReviewRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DiscardReviewExecute(r)
}

func (a *PullRequestsAPIRepository) DiscardReviewRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIDiscardReviewRequest {
    return PullRequestsAPIDiscardReviewRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) DiscardReviewExecute(r *PullRequestsAPIDiscardReviewRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDiscardReviewCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) DiscardReview(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDiscardReviewCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeDiscardReviewCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIFinishReviewRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    version *string
    restPullRequestFinishReviewRequest *RestPullRequestFinishReviewRequest
}

    // The current version of the pull request. If the server&#39;s version isn&#39;t the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the &#39;version&#39; attribute in the returned JSON structure.
func (r *PullRequestsAPIFinishReviewRequest) Version(version string) *PullRequestsAPIFinishReviewRequest {
    r.version = &version
    return r
}

    // The REST request which contains comment text and participant status
func (r *PullRequestsAPIFinishReviewRequest) RestPullRequestFinishReviewRequest(restPullRequestFinishReviewRequest RestPullRequestFinishReviewRequest) *PullRequestsAPIFinishReviewRequest {
    r.restPullRequestFinishReviewRequest = &restPullRequestFinishReviewRequest
    return r
}

func (r *PullRequestsAPIFinishReviewRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.FinishReviewExecute(r)
}

func (a *PullRequestsAPIRepository) FinishReviewRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIFinishReviewRequest {
    return PullRequestsAPIFinishReviewRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) FinishReviewExecute(r *PullRequestsAPIFinishReviewRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.version!=nil {
        withUrlQueryParam(requestURL, "version", *r.version)
    }
    return a.makeFinishReviewCall(r.ctx, requestURL, r.restPullRequestFinishReviewRequest)
}

func (a *PullRequestsAPIRepository) FinishReview(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestFinishReviewRequest RestPullRequestFinishReviewRequest, version string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "version", version)
    return a.makeFinishReviewCall(ctx, requestURL, restPullRequestFinishReviewRequest)
}

func (a *PullRequestsAPIRepository) makeFinishReviewCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIGet3Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIGet3Request) Execute() (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Get3Execute(r)
}

func (a *PullRequestsAPIRepository) Get3Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGet3Request {
    return PullRequestsAPIGet3Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) Get3Execute(r *PullRequestsAPIGet3Request) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGet3Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) Get3(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGet3Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGet3Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestPullRequest
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequest](&response)
        if err == nil {
            result = response.Body.(RestPullRequest)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetActivitiesRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    fromType *string
    fromId *string
    start *float32
    limit *float32
}

    // (required if &lt;strong&gt;fromId&lt;/strong&gt; is present) the type of the activity item specified by &lt;strong&gt;fromId&lt;/strong&gt; (either &lt;strong&gt;COMMENT&lt;/strong&gt; or &lt;strong&gt;ACTIVITY&lt;/strong&gt;)
func (r *PullRequestsAPIGetActivitiesRequest) FromType(fromType string) *PullRequestsAPIGetActivitiesRequest {
    r.fromType = &fromType
    return r
}

    // (optional) the ID of the activity item to use as the first item in the returned page
func (r *PullRequestsAPIGetActivitiesRequest) FromId(fromId string) *PullRequestsAPIGetActivitiesRequest {
    r.fromId = &fromId
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetActivitiesRequest) Start(start float32) *PullRequestsAPIGetActivitiesRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetActivitiesRequest) Limit(limit float32) *PullRequestsAPIGetActivitiesRequest {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetActivitiesRequest) Execute() (GetActivities200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetActivitiesExecute(r)
}

func (a *PullRequestsAPIRepository) GetActivitiesRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetActivitiesRequest {
    return PullRequestsAPIGetActivitiesRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetActivitiesExecute(r *PullRequestsAPIGetActivitiesRequest) (GetActivities200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.fromType!=nil {
        withUrlQueryParam(requestURL, "fromType", *r.fromType)
    }
    if r.fromId!=nil {
        withUrlQueryParam(requestURL, "fromId", *r.fromId)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetActivitiesCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetActivities(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, fromType string, fromId string, start float32, limit float32) (GetActivities200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/activities"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "fromType", fromType)
    withUrlQueryParam(requestURL, "fromId", fromId)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetActivitiesCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetActivitiesCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetActivities200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetActivities200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetActivities200Response](&response)
        if err == nil {
            result = response.Body.(GetActivities200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetAutoMergeRequestRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIGetAutoMergeRequestRequest) Execute() (RestAutoMergeRequest, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetAutoMergeRequestExecute(r)
}

func (a *PullRequestsAPIRepository) GetAutoMergeRequestRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetAutoMergeRequestRequest {
    return PullRequestsAPIGetAutoMergeRequestRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetAutoMergeRequestExecute(r *PullRequestsAPIGetAutoMergeRequestRequest) (RestAutoMergeRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetAutoMergeRequestCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetAutoMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestAutoMergeRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetAutoMergeRequestCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetAutoMergeRequestCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestAutoMergeRequest, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestAutoMergeRequest
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestAutoMergeRequest](&response)
        if err == nil {
            result = response.Body.(RestAutoMergeRequest)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetComment1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIGetComment1Request) Execute() (RestComment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetComment1Execute(r)
}

func (a *PullRequestsAPIRepository) GetComment1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComment1Request {
    return PullRequestsAPIGetComment1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetComment1Execute(r *PullRequestsAPIGetComment1Request) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetComment1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetComment1(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetComment1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetComment1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestComment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestComment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestComment](&response)
        if err == nil {
            result = response.Body.(RestComment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetComment2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIGetComment2Request) Execute() (RestComment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetComment2Execute(r)
}

func (a *PullRequestsAPIRepository) GetComment2Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComment2Request {
    return PullRequestsAPIGetComment2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetComment2Execute(r *PullRequestsAPIGetComment2Request) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetComment2Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetComment2(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetComment2Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetComment2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestComment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestComment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestComment](&response)
        if err == nil {
            result = response.Body.(RestComment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetComments1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    count *string
    state *[]string
    states *string
    start *float32
    limit *float32
}

    // If true only the count of the comments by state will be returned (and not the body of the comments).
func (r *PullRequestsAPIGetComments1Request) Count(count string) *PullRequestsAPIGetComments1Request {
    r.count = &count
    return r
}

func (r *PullRequestsAPIGetComments1Request) State(state []string) *PullRequestsAPIGetComments1Request {
    r.state = &state
    return r
}

    // (optional). If supplied, only comments with a state in the given list will be returned. The state can be OPEN or RESOLVED.
func (r *PullRequestsAPIGetComments1Request) States(states string) *PullRequestsAPIGetComments1Request {
    r.states = &states
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetComments1Request) Start(start float32) *PullRequestsAPIGetComments1Request {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetComments1Request) Limit(limit float32) *PullRequestsAPIGetComments1Request {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetComments1Request) Execute() (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetComments1Execute(r)
}

func (a *PullRequestsAPIRepository) GetComments1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComments1Request {
    return PullRequestsAPIGetComments1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetComments1Execute(r *PullRequestsAPIGetComments1Request) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.count!=nil {
        withUrlQueryParam(requestURL, "count", *r.count)
    }
    if r.state!=nil {
        for _, ___element := range *r.state {
            withUrlQueryParam(requestURL, "state", ___element)
        }
    }
    if r.states!=nil {
        withUrlQueryParam(requestURL, "states", *r.states)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetComments1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetComments1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, count string, state []string, states string, start float32, limit float32) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "count", count)
    for _, ___element := range state {
        withUrlQueryParam(requestURL, "state", ___element)
    }
    withUrlQueryParam(requestURL, "states", states)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetComments1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetComments1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetComments200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetComments200Response](&response)
        if err == nil {
            result = response.Body.(GetComments200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetComments2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    path *string
    projectKey string
    pullRequestId string
    repositorySlug string
    fromHash *string
    anchorState *string
    diffType *[]string
    toHash *string
    state *[]string
    diffTypes *string
    states *string
    start *float32
    limit *float32
}

    // The path to stream comments for a given path
func (r *PullRequestsAPIGetComments2Request) Path(path string) *PullRequestsAPIGetComments2Request {
    r.path = &path
    return r
}

    // The from commit hash to stream comments for a RANGE or COMMIT arbitrary change scope
func (r *PullRequestsAPIGetComments2Request) FromHash(fromHash string) *PullRequestsAPIGetComments2Request {
    r.fromHash = &fromHash
    return r
}

    // ACTIVE to stream the active comments; ORPHANED to stream the orphaned comments; ALL to stream both the active and the orphaned comments;
func (r *PullRequestsAPIGetComments2Request) AnchorState(anchorState string) *PullRequestsAPIGetComments2Request {
    r.anchorState = &anchorState
    return r
}

func (r *PullRequestsAPIGetComments2Request) DiffType(diffType []string) *PullRequestsAPIGetComments2Request {
    r.diffType = &diffType
    return r
}

    // The to commit hash to stream comments for a RANGE or COMMIT arbitrary change scope
func (r *PullRequestsAPIGetComments2Request) ToHash(toHash string) *PullRequestsAPIGetComments2Request {
    r.toHash = &toHash
    return r
}

func (r *PullRequestsAPIGetComments2Request) State(state []string) *PullRequestsAPIGetComments2Request {
    r.state = &state
    return r
}

    // EFFECTIVE to stream the comments related to the effective diff of the pull request; RANGE to stream comments related to a commit range between two arbitrary commits (requires &#39;fromHash&#39; and &#39;toHash&#39;); COMMIT to stream comments related to a commit between two arbitrary commits (requires &#39;fromHash&#39; and &#39;toHash&#39;)
func (r *PullRequestsAPIGetComments2Request) DiffTypes(diffTypes string) *PullRequestsAPIGetComments2Request {
    r.diffTypes = &diffTypes
    return r
}

    // (optional). If supplied, only comments with a state in the given list will be returned. The state can be OPEN or RESOLVED.
func (r *PullRequestsAPIGetComments2Request) States(states string) *PullRequestsAPIGetComments2Request {
    r.states = &states
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetComments2Request) Start(start float32) *PullRequestsAPIGetComments2Request {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetComments2Request) Limit(limit float32) *PullRequestsAPIGetComments2Request {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetComments2Request) Execute() (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetComments2Execute(r)
}

func (a *PullRequestsAPIRepository) GetComments2Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetComments2Request {
    return PullRequestsAPIGetComments2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetComments2Execute(r *PullRequestsAPIGetComments2Request) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.path!=nil {
        withUrlQueryParam(requestURL, "path", *r.path)
    }
    if r.fromHash!=nil {
        withUrlQueryParam(requestURL, "fromHash", *r.fromHash)
    }
    if r.anchorState!=nil {
        withUrlQueryParam(requestURL, "anchorState", *r.anchorState)
    }
    if r.diffType!=nil {
        for _, ___element := range *r.diffType {
            withUrlQueryParam(requestURL, "diffType", ___element)
        }
    }
    if r.toHash!=nil {
        withUrlQueryParam(requestURL, "toHash", *r.toHash)
    }
    if r.state!=nil {
        for _, ___element := range *r.state {
            withUrlQueryParam(requestURL, "state", ___element)
        }
    }
    if r.diffTypes!=nil {
        withUrlQueryParam(requestURL, "diffTypes", *r.diffTypes)
    }
    if r.states!=nil {
        withUrlQueryParam(requestURL, "states", *r.states)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetComments2Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetComments2(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, path string, fromHash string, anchorState string, diffType []string, toHash string, state []string, diffTypes string, states string, start float32, limit float32) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "path", path)
    withUrlQueryParam(requestURL, "fromHash", fromHash)
    withUrlQueryParam(requestURL, "anchorState", anchorState)
    for _, ___element := range diffType {
        withUrlQueryParam(requestURL, "diffType", ___element)
    }
    withUrlQueryParam(requestURL, "toHash", toHash)
    for _, ___element := range state {
        withUrlQueryParam(requestURL, "state", ___element)
    }
    withUrlQueryParam(requestURL, "diffTypes", diffTypes)
    withUrlQueryParam(requestURL, "states", states)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetComments2Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetComments2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetComments200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetComments200Response](&response)
        if err == nil {
            result = response.Body.(GetComments200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetCommitMessageSuggestionRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIGetCommitMessageSuggestionRequest) Execute() (RestCommitMessageSuggestion, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetCommitMessageSuggestionExecute(r)
}

func (a *PullRequestsAPIRepository) GetCommitMessageSuggestionRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetCommitMessageSuggestionRequest {
    return PullRequestsAPIGetCommitMessageSuggestionRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetCommitMessageSuggestionExecute(r *PullRequestsAPIGetCommitMessageSuggestionRequest) (RestCommitMessageSuggestion, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commit-message-suggestion"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetCommitMessageSuggestionCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetCommitMessageSuggestion(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestCommitMessageSuggestion, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commit-message-suggestion"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetCommitMessageSuggestionCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetCommitMessageSuggestionCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestCommitMessageSuggestion, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestCommitMessageSuggestion
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestCommitMessageSuggestion](&response)
        if err == nil {
            result = response.Body.(RestCommitMessageSuggestion)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetCommits1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    avatarScheme *string
    withCounts *string
    avatarSize *string
    start *float32
    limit *float32
}

    // The desired scheme for the avatar URL. If the parameter is not present URLs will use the same scheme as this request
func (r *PullRequestsAPIGetCommits1Request) AvatarScheme(avatarScheme string) *PullRequestsAPIGetCommits1Request {
    r.avatarScheme = &avatarScheme
    return r
}

    // If set to true, the service will add \&quot;authorCount\&quot; and \&quot;totalCount\&quot; at the end of the page. \&quot;authorCount\&quot; is the number of different authors and \&quot;totalCount\&quot; is the total number of commits.
func (r *PullRequestsAPIGetCommits1Request) WithCounts(withCounts string) *PullRequestsAPIGetCommits1Request {
    r.withCounts = &withCounts
    return r
}

    // If present the service adds avatar URLs for commit authors. Should be an integer specifying the desired size in pixels. If the parameter is not present, avatar URLs will not be setCOMMIT to stream comments related to a commit between two arbitrary commits (requires &#39;fromHash&#39; and &#39;toHash&#39;)
func (r *PullRequestsAPIGetCommits1Request) AvatarSize(avatarSize string) *PullRequestsAPIGetCommits1Request {
    r.avatarSize = &avatarSize
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetCommits1Request) Start(start float32) *PullRequestsAPIGetCommits1Request {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetCommits1Request) Limit(limit float32) *PullRequestsAPIGetCommits1Request {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetCommits1Request) Execute() (GetCommits200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetCommits1Execute(r)
}

func (a *PullRequestsAPIRepository) GetCommits1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetCommits1Request {
    return PullRequestsAPIGetCommits1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetCommits1Execute(r *PullRequestsAPIGetCommits1Request) (GetCommits200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.avatarScheme!=nil {
        withUrlQueryParam(requestURL, "avatarScheme", *r.avatarScheme)
    }
    if r.withCounts!=nil {
        withUrlQueryParam(requestURL, "withCounts", *r.withCounts)
    }
    if r.avatarSize!=nil {
        withUrlQueryParam(requestURL, "avatarSize", *r.avatarSize)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetCommits1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetCommits1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, avatarScheme string, withCounts string, avatarSize string, start float32, limit float32) (GetCommits200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/commits"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "avatarScheme", avatarScheme)
    withUrlQueryParam(requestURL, "withCounts", withCounts)
    withUrlQueryParam(requestURL, "avatarSize", avatarSize)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetCommits1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetCommits1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetCommits200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetCommits200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetCommits200Response](&response)
        if err == nil {
            result = response.Body.(GetCommits200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetMergeBase1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIGetMergeBase1Request) Execute() (RestCommit, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetMergeBase1Execute(r)
}

func (a *PullRequestsAPIRepository) GetMergeBase1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetMergeBase1Request {
    return PullRequestsAPIGetMergeBase1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetMergeBase1Execute(r *PullRequestsAPIGetMergeBase1Request) (RestCommit, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge-base"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetMergeBase1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetMergeBase1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestCommit, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge-base"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetMergeBase1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetMergeBase1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestCommit, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestCommit
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestCommit](&response)
        if err == nil {
            result = response.Body.(RestCommit)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetMergeConfigRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    scmId string
}

func (r *PullRequestsAPIGetMergeConfigRequest) Execute() (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetMergeConfigExecute(r)
}

func (a *PullRequestsAPIRepository) GetMergeConfigRequest(ctx context.Context, scmId string) PullRequestsAPIGetMergeConfigRequest {
    return PullRequestsAPIGetMergeConfigRequest{
        ApiService: a,
        ctx: ctx,
        scmId: scmId,
    }
}

func (a *PullRequestsAPIRepository) GetMergeConfigExecute(r *PullRequestsAPIGetMergeConfigRequest) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/admin/pull-requests/{scmId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{scmId}", urlUtil.PathEscape(r.scmId))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetMergeConfigCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetMergeConfig(ctx context.Context, scmId string) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/admin/pull-requests/{scmId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{scmId}", urlUtil.PathEscape(scmId))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetMergeConfigCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetMergeConfigCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestPullRequestMergeConfig
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestMergeConfig](&response)
        if err == nil {
            result = response.Body.(RestPullRequestMergeConfig)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetPageRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
    withAttributes *string
    at *string
    withProperties *string
    draft *string
    filterText *string
    state *string
    order *string
    direction *string
    start *float32
    limit *float32
}

    // (optional) defaults to true, whether to return additional pull request attributes
func (r *PullRequestsAPIGetPageRequest) WithAttributes(withAttributes string) *PullRequestsAPIGetPageRequest {
    r.withAttributes = &withAttributes
    return r
}

    // (optional) a &lt;i&gt;fully-qualified&lt;/i&gt; branch ID to find pull requests to or from, such as refs/heads/master
func (r *PullRequestsAPIGetPageRequest) At(at string) *PullRequestsAPIGetPageRequest {
    r.at = &at
    return r
}

    // (optional) defaults to true, whether to return additional pull request properties
func (r *PullRequestsAPIGetPageRequest) WithProperties(withProperties string) *PullRequestsAPIGetPageRequest {
    r.withProperties = &withProperties
    return r
}

    // (optional) If specified, only pull requests matching the supplied draft status will be returned.
func (r *PullRequestsAPIGetPageRequest) Draft(draft string) *PullRequestsAPIGetPageRequest {
    r.draft = &draft
    return r
}

    // (optional) If specified, only pull requests where the title or description contains the supplied string will be returned.
func (r *PullRequestsAPIGetPageRequest) FilterText(filterText string) *PullRequestsAPIGetPageRequest {
    r.filterText = &filterText
    return r
}

    // (optional, defaults to &lt;strong&gt;OPEN&lt;/strong&gt;). Supply &lt;strong&gt;ALL&lt;/strong&gt; to return pull request in any state. If a state is supplied only pull requests in the specified state will be returned. Either &lt;strong&gt;OPEN&lt;/strong&gt;, &lt;strong&gt;DECLINED&lt;/strong&gt; or &lt;strong&gt;MERGED&lt;/strong&gt;.
func (r *PullRequestsAPIGetPageRequest) State(state string) *PullRequestsAPIGetPageRequest {
    r.state = &state
    return r
}

    // (optional, defaults to &lt;strong&gt;NEWEST&lt;/strong&gt;) the order to return pull requests in, either &lt;strong&gt;OLDEST&lt;/strong&gt; (as in: \&quot;oldest first\&quot;) or &lt;strong&gt;NEWEST&lt;/strong&gt;.
func (r *PullRequestsAPIGetPageRequest) Order(order string) *PullRequestsAPIGetPageRequest {
    r.order = &order
    return r
}

    // (optional, defaults to &lt;strong&gt;INCOMING&lt;/strong&gt;) the direction relative to the specified repository. Either &lt;strong&gt;INCOMING&lt;/strong&gt; or &lt;strong&gt;OUTGOING&lt;/strong&gt;.
func (r *PullRequestsAPIGetPageRequest) Direction(direction string) *PullRequestsAPIGetPageRequest {
    r.direction = &direction
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetPageRequest) Start(start float32) *PullRequestsAPIGetPageRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetPageRequest) Limit(limit float32) *PullRequestsAPIGetPageRequest {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetPageRequest) Execute() (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetPageExecute(r)
}

func (a *PullRequestsAPIRepository) GetPageRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetPageRequest {
    return PullRequestsAPIGetPageRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetPageExecute(r *PullRequestsAPIGetPageRequest) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.withAttributes!=nil {
        withUrlQueryParam(requestURL, "withAttributes", *r.withAttributes)
    }
    if r.at!=nil {
        withUrlQueryParam(requestURL, "at", *r.at)
    }
    if r.withProperties!=nil {
        withUrlQueryParam(requestURL, "withProperties", *r.withProperties)
    }
    if r.draft!=nil {
        withUrlQueryParam(requestURL, "draft", *r.draft)
    }
    if r.filterText!=nil {
        withUrlQueryParam(requestURL, "filterText", *r.filterText)
    }
    if r.state!=nil {
        withUrlQueryParam(requestURL, "state", *r.state)
    }
    if r.order!=nil {
        withUrlQueryParam(requestURL, "order", *r.order)
    }
    if r.direction!=nil {
        withUrlQueryParam(requestURL, "direction", *r.direction)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetPageCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetPage(ctx context.Context, projectKey string, repositorySlug string, withAttributes string, at string, withProperties string, draft string, filterText string, state string, order string, direction string, start float32, limit float32) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "withAttributes", withAttributes)
    withUrlQueryParam(requestURL, "at", at)
    withUrlQueryParam(requestURL, "withProperties", withProperties)
    withUrlQueryParam(requestURL, "draft", draft)
    withUrlQueryParam(requestURL, "filterText", filterText)
    withUrlQueryParam(requestURL, "state", state)
    withUrlQueryParam(requestURL, "order", order)
    withUrlQueryParam(requestURL, "direction", direction)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetPageCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetPageCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetPullRequests1200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetPullRequests1200Response](&response)
        if err == nil {
            result = response.Body.(GetPullRequests1200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetPullRequestConditionsRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
}

func (r *PullRequestsAPIGetPullRequestConditionsRequest) Execute() ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetPullRequestConditionsExecute(r)
}

func (a *PullRequestsAPIRepository) GetPullRequestConditionsRequest(ctx context.Context, projectKey string) PullRequestsAPIGetPullRequestConditionsRequest {
    return PullRequestsAPIGetPullRequestConditionsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
    }
}

func (a *PullRequestsAPIRepository) GetPullRequestConditionsExecute(r *PullRequestsAPIGetPullRequestConditionsRequest) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/conditions"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetPullRequestConditionsCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetPullRequestConditions(ctx context.Context, projectKey string) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/conditions"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetPullRequestConditionsCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetPullRequestConditionsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result []RestPullRequestCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}

    if response.Status < 400 {
        err = safeUnmarshal[[]RestPullRequestCondition](&response)
        if err == nil {
            result = response.Body.([]RestPullRequestCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetPullRequestConditions1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
}

func (r *PullRequestsAPIGetPullRequestConditions1Request) Execute() ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetPullRequestConditions1Execute(r)
}

func (a *PullRequestsAPIRepository) GetPullRequestConditions1Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetPullRequestConditions1Request {
    return PullRequestsAPIGetPullRequestConditions1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetPullRequestConditions1Execute(r *PullRequestsAPIGetPullRequestConditions1Request) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/conditions"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetPullRequestConditions1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetPullRequestConditions1(ctx context.Context, projectKey string, repositorySlug string) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/conditions"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetPullRequestConditions1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetPullRequestConditions1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result []RestPullRequestCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}

    if response.Status < 400 {
        err = safeUnmarshal[[]RestPullRequestCondition](&response)
        if err == nil {
            result = response.Body.([]RestPullRequestCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetPullRequestsRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    start *float32
    limit *float32
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetPullRequestsRequest) Start(start float32) *PullRequestsAPIGetPullRequestsRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetPullRequestsRequest) Limit(limit float32) *PullRequestsAPIGetPullRequestsRequest {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetPullRequestsRequest) Execute() (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetPullRequestsExecute(r)
}

func (a *PullRequestsAPIRepository) GetPullRequestsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) PullRequestsAPIGetPullRequestsRequest {
    return PullRequestsAPIGetPullRequestsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetPullRequestsExecute(r *PullRequestsAPIGetPullRequestsRequest) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetPullRequestsCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetPullRequests(ctx context.Context, projectKey string, commitId string, repositorySlug string, start float32, limit float32) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/pull-requests"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetPullRequestsCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetPullRequestsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetPullRequests1200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetPullRequests1200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetPullRequests1200Response](&response)
        if err == nil {
            result = response.Body.(GetPullRequests1200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetReviewRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    start *float32
    limit *float32
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetReviewRequest) Start(start float32) *PullRequestsAPIGetReviewRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetReviewRequest) Limit(limit float32) *PullRequestsAPIGetReviewRequest {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetReviewRequest) Execute() (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetReviewExecute(r)
}

func (a *PullRequestsAPIRepository) GetReviewRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIGetReviewRequest {
    return PullRequestsAPIGetReviewRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetReviewExecute(r *PullRequestsAPIGetReviewRequest) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetReviewCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetReview(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, start float32, limit float32) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/review"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetReviewCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetReviewCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetComments200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetComments200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetComments200Response](&response)
        if err == nil {
            result = response.Body.(GetComments200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetReviewerGroupRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
}

func (r *PullRequestsAPIGetReviewerGroupRequest) Execute() (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetReviewerGroupExecute(r)
}

func (a *PullRequestsAPIRepository) GetReviewerGroupRequest(ctx context.Context, projectKey string, id string) PullRequestsAPIGetReviewerGroupRequest {
    return PullRequestsAPIGetReviewerGroupRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
    }
}

func (a *PullRequestsAPIRepository) GetReviewerGroupExecute(r *PullRequestsAPIGetReviewerGroupRequest) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetReviewerGroupCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetReviewerGroup(ctx context.Context, projectKey string, id string) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetReviewerGroupCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetReviewerGroupCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestReviewerGroup
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestReviewerGroup](&response)
        if err == nil {
            result = response.Body.(RestReviewerGroup)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetReviewerGroup1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
    repositorySlug string
}

func (r *PullRequestsAPIGetReviewerGroup1Request) Execute() (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetReviewerGroup1Execute(r)
}

func (a *PullRequestsAPIRepository) GetReviewerGroup1Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIGetReviewerGroup1Request {
    return PullRequestsAPIGetReviewerGroup1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetReviewerGroup1Execute(r *PullRequestsAPIGetReviewerGroup1Request) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetReviewerGroup1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetReviewerGroup1(ctx context.Context, projectKey string, id string, repositorySlug string) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetReviewerGroup1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetReviewerGroup1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestReviewerGroup
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestReviewerGroup](&response)
        if err == nil {
            result = response.Body.(RestReviewerGroup)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetReviewerGroupsRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    start *float32
    limit *float32
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetReviewerGroupsRequest) Start(start float32) *PullRequestsAPIGetReviewerGroupsRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetReviewerGroupsRequest) Limit(limit float32) *PullRequestsAPIGetReviewerGroupsRequest {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetReviewerGroupsRequest) Execute() (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetReviewerGroupsExecute(r)
}

func (a *PullRequestsAPIRepository) GetReviewerGroupsRequest(ctx context.Context, projectKey string) PullRequestsAPIGetReviewerGroupsRequest {
    return PullRequestsAPIGetReviewerGroupsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
    }
}

func (a *PullRequestsAPIRepository) GetReviewerGroupsExecute(r *PullRequestsAPIGetReviewerGroupsRequest) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetReviewerGroupsCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetReviewerGroups(ctx context.Context, projectKey string, start float32, limit float32) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetReviewerGroupsCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetReviewerGroupsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetReviewerGroups1200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetReviewerGroups1200Response](&response)
        if err == nil {
            result = response.Body.(GetReviewerGroups1200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetReviewerGroups1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
    start *float32
    limit *float32
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIGetReviewerGroups1Request) Start(start float32) *PullRequestsAPIGetReviewerGroups1Request {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIGetReviewerGroups1Request) Limit(limit float32) *PullRequestsAPIGetReviewerGroups1Request {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIGetReviewerGroups1Request) Execute() (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetReviewerGroups1Execute(r)
}

func (a *PullRequestsAPIRepository) GetReviewerGroups1Request(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetReviewerGroups1Request {
    return PullRequestsAPIGetReviewerGroups1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetReviewerGroups1Execute(r *PullRequestsAPIGetReviewerGroups1Request) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetReviewerGroups1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetReviewerGroups1(ctx context.Context, projectKey string, repositorySlug string, start float32, limit float32) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetReviewerGroups1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetReviewerGroups1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetReviewerGroups1200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetReviewerGroups1200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetReviewerGroups1200Response](&response)
        if err == nil {
            result = response.Body.(GetReviewerGroups1200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetReviewersRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
    targetRepoId *string
    sourceRepoId *string
    sourceRefId *string
    targetRefId *string
}

    // The ID of the repository in which the target ref exists
func (r *PullRequestsAPIGetReviewersRequest) TargetRepoId(targetRepoId string) *PullRequestsAPIGetReviewersRequest {
    r.targetRepoId = &targetRepoId
    return r
}

    // The ID of the repository in which the source ref exists
func (r *PullRequestsAPIGetReviewersRequest) SourceRepoId(sourceRepoId string) *PullRequestsAPIGetReviewersRequest {
    r.sourceRepoId = &sourceRepoId
    return r
}

    // The ID of the source ref
func (r *PullRequestsAPIGetReviewersRequest) SourceRefId(sourceRefId string) *PullRequestsAPIGetReviewersRequest {
    r.sourceRefId = &sourceRefId
    return r
}

    // The ID of the target ref
func (r *PullRequestsAPIGetReviewersRequest) TargetRefId(targetRefId string) *PullRequestsAPIGetReviewersRequest {
    r.targetRefId = &targetRefId
    return r
}

func (r *PullRequestsAPIGetReviewersRequest) Execute() ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetReviewersExecute(r)
}

func (a *PullRequestsAPIRepository) GetReviewersRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPIGetReviewersRequest {
    return PullRequestsAPIGetReviewersRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetReviewersExecute(r *PullRequestsAPIGetReviewersRequest) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/reviewers"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.targetRepoId!=nil {
        withUrlQueryParam(requestURL, "targetRepoId", *r.targetRepoId)
    }
    if r.sourceRepoId!=nil {
        withUrlQueryParam(requestURL, "sourceRepoId", *r.sourceRepoId)
    }
    if r.sourceRefId!=nil {
        withUrlQueryParam(requestURL, "sourceRefId", *r.sourceRefId)
    }
    if r.targetRefId!=nil {
        withUrlQueryParam(requestURL, "targetRefId", *r.targetRefId)
    }
    return a.makeGetReviewersCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetReviewers(ctx context.Context, projectKey string, repositorySlug string, targetRepoId string, sourceRepoId string, sourceRefId string, targetRefId string) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/reviewers"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "targetRepoId", targetRepoId)
    withUrlQueryParam(requestURL, "sourceRepoId", sourceRepoId)
    withUrlQueryParam(requestURL, "sourceRefId", sourceRefId)
    withUrlQueryParam(requestURL, "targetRefId", targetRefId)
    return a.makeGetReviewersCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetReviewersCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) ([]RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result []RestPullRequestCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[RestErrors](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[[]RestPullRequestCondition](&response)
        if err == nil {
            result = response.Body.([]RestPullRequestCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIGetUsersRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
    repositorySlug string
}

func (r *PullRequestsAPIGetUsersRequest) Execute() ([]RestApplicationUser, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetUsersExecute(r)
}

func (a *PullRequestsAPIRepository) GetUsersRequest(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIGetUsersRequest {
    return PullRequestsAPIGetUsersRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) GetUsersExecute(r *PullRequestsAPIGetUsersRequest) ([]RestApplicationUser, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}/users"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetUsersCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) GetUsers(ctx context.Context, projectKey string, id string, repositorySlug string) ([]RestApplicationUser, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}/users"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetUsersCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeGetUsersCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) ([]RestApplicationUser, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result []RestApplicationUser
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[RestErrors](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[RestErrors](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[[]RestApplicationUser](&response)
        if err == nil {
            result = response.Body.([]RestApplicationUser)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIListParticipantsRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    start *float32
    limit *float32
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIListParticipantsRequest) Start(start float32) *PullRequestsAPIListParticipantsRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIListParticipantsRequest) Limit(limit float32) *PullRequestsAPIListParticipantsRequest {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIListParticipantsRequest) Execute() (ListParticipants200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.ListParticipantsExecute(r)
}

func (a *PullRequestsAPIRepository) ListParticipantsRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIListParticipantsRequest {
    return PullRequestsAPIListParticipantsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) ListParticipantsExecute(r *PullRequestsAPIListParticipantsRequest) (ListParticipants200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeListParticipantsCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) ListParticipants(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, start float32, limit float32) (ListParticipants200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeListParticipantsCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeListParticipantsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (ListParticipants200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result ListParticipants200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[ListParticipants200Response](&response)
        if err == nil {
            result = response.Body.(ListParticipants200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIMergeRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    version *string
    restPullRequestMergeRequest *RestPullRequestMergeRequest
}

    // The current version of the pull request. If the server&#39;s version isn&#39;t the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the &#39;version&#39; attribute in the returned JSON structure.
func (r *PullRequestsAPIMergeRequest) Version(version string) *PullRequestsAPIMergeRequest {
    r.version = &version
    return r
}

    // The body holder
func (r *PullRequestsAPIMergeRequest) RestPullRequestMergeRequest(restPullRequestMergeRequest RestPullRequestMergeRequest) *PullRequestsAPIMergeRequest {
    r.restPullRequestMergeRequest = &restPullRequestMergeRequest
    return r
}

func (r *PullRequestsAPIMergeRequest) Execute() (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.MergeExecute(r)
}

func (a *PullRequestsAPIRepository) MergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIMergeRequest {
    return PullRequestsAPIMergeRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) MergeExecute(r *PullRequestsAPIMergeRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.version!=nil {
        withUrlQueryParam(requestURL, "version", *r.version)
    }
    return a.makeMergeCall(r.ctx, requestURL, r.restPullRequestMergeRequest)
}

func (a *PullRequestsAPIRepository) Merge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestMergeRequest RestPullRequestMergeRequest, version string) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "version", version)
    return a.makeMergeCall(ctx, requestURL, restPullRequestMergeRequest)
}

func (a *PullRequestsAPIRepository) makeMergeCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequest
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 403 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequest](&response)
        if err == nil {
            result = response.Body.(RestPullRequest)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIReact1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    emoticon string
    repositorySlug string
}

func (r *PullRequestsAPIReact1Request) Execute() (RestUserReaction, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.React1Execute(r)
}

func (a *PullRequestsAPIRepository) React1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) PullRequestsAPIReact1Request {
    return PullRequestsAPIReact1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        emoticon: emoticon,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) React1Execute(r *PullRequestsAPIReact1Request) (RestUserReaction, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/reactions/{emoticon}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{emoticon}", urlUtil.PathEscape(r.emoticon))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeReact1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) React1(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) (RestUserReaction, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/reactions/{emoticon}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{emoticon}", urlUtil.PathEscape(emoticon))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeReact1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeReact1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestUserReaction, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestUserReaction
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}

    if response.Status < 400 {
        err = safeUnmarshal[RestUserReaction](&response)
        if err == nil {
            result = response.Body.(RestUserReaction)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIRebaseRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    restPullRequestRebaseRequest *RestPullRequestRebaseRequest
}

    // The pull request rebase request.
func (r *PullRequestsAPIRebaseRequest) RestPullRequestRebaseRequest(restPullRequestRebaseRequest RestPullRequestRebaseRequest) *PullRequestsAPIRebaseRequest {
    r.restPullRequestRebaseRequest = &restPullRequestRebaseRequest
    return r
}

func (r *PullRequestsAPIRebaseRequest) Execute() (RestPullRequestRebaseResult, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.RebaseExecute(r)
}

func (a *PullRequestsAPIRepository) RebaseRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIRebaseRequest {
    return PullRequestsAPIRebaseRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) RebaseExecute(r *PullRequestsAPIRebaseRequest) (RestPullRequestRebaseResult, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/git/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/rebase"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeRebaseCall(r.ctx, requestURL, r.restPullRequestRebaseRequest)
}

func (a *PullRequestsAPIRepository) Rebase(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestRebaseRequest RestPullRequestRebaseRequest) (RestPullRequestRebaseResult, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/git/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/rebase"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeRebaseCall(ctx, requestURL, restPullRequestRebaseRequest)
}

func (a *PullRequestsAPIRepository) makeRebaseCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestRebaseResult, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequestRebaseResult
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestRebaseResult](&response)
        if err == nil {
            result = response.Body.(RestPullRequestRebaseResult)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIReopenRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    version *string
    restPullRequestReopenRequest *RestPullRequestReopenRequest
}

    // The current version of the pull request. If the server&#39;s version isn&#39;t the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the &#39;version&#39; attribute in the returned JSON structure.
func (r *PullRequestsAPIReopenRequest) Version(version string) *PullRequestsAPIReopenRequest {
    r.version = &version
    return r
}

    // The body holder
func (r *PullRequestsAPIReopenRequest) RestPullRequestReopenRequest(restPullRequestReopenRequest RestPullRequestReopenRequest) *PullRequestsAPIReopenRequest {
    r.restPullRequestReopenRequest = &restPullRequestReopenRequest
    return r
}

func (r *PullRequestsAPIReopenRequest) Execute() (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.ReopenExecute(r)
}

func (a *PullRequestsAPIRepository) ReopenRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIReopenRequest {
    return PullRequestsAPIReopenRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) ReopenExecute(r *PullRequestsAPIReopenRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.version!=nil {
        withUrlQueryParam(requestURL, "version", *r.version)
    }
    return a.makeReopenCall(r.ctx, requestURL, r.restPullRequestReopenRequest)
}

func (a *PullRequestsAPIRepository) Reopen(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequestReopenRequest RestPullRequestReopenRequest, version string) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/reopen"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "version", version)
    return a.makeReopenCall(ctx, requestURL, restPullRequestReopenRequest)
}

func (a *PullRequestsAPIRepository) makeReopenCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequest
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequest](&response)
        if err == nil {
            result = response.Body.(RestPullRequest)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPISearchRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    repositorySlug string
    filter *string
    role *string
    direction *string
    start *float32
    limit *float32
}

    // (optional) Return only users, whose username, name or email address &lt;i&gt;contain&lt;/i&gt; the filter value
func (r *PullRequestsAPISearchRequest) Filter(filter string) *PullRequestsAPISearchRequest {
    r.filter = &filter
    return r
}

    // (optional) The role associated with the pull request participant. This must be one of AUTHOR, REVIEWER, or PARTICIPANT
func (r *PullRequestsAPISearchRequest) Role(role string) *PullRequestsAPISearchRequest {
    r.role = &role
    return r
}

    // (optional), Defaults to &lt;strong&gt;INCOMING&lt;/strong&gt;) the direction relative to the specified repository. Either &lt;strong&gt;INCOMING&lt;/strong&gt; or &lt;strong&gt;OUTGOING&lt;/strong&gt;.
func (r *PullRequestsAPISearchRequest) Direction(direction string) *PullRequestsAPISearchRequest {
    r.direction = &direction
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPISearchRequest) Start(start float32) *PullRequestsAPISearchRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPISearchRequest) Limit(limit float32) *PullRequestsAPISearchRequest {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPISearchRequest) Execute() (GetLikers200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.SearchExecute(r)
}

func (a *PullRequestsAPIRepository) SearchRequest(ctx context.Context, projectKey string, repositorySlug string) PullRequestsAPISearchRequest {
    return PullRequestsAPISearchRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) SearchExecute(r *PullRequestsAPISearchRequest) (GetLikers200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.filter!=nil {
        withUrlQueryParam(requestURL, "filter", *r.filter)
    }
    if r.role!=nil {
        withUrlQueryParam(requestURL, "role", *r.role)
    }
    if r.direction!=nil {
        withUrlQueryParam(requestURL, "direction", *r.direction)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeSearchCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) Search(ctx context.Context, projectKey string, repositorySlug string, filter string, role string, direction string, start float32, limit float32) (GetLikers200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "filter", filter)
    withUrlQueryParam(requestURL, "role", role)
    withUrlQueryParam(requestURL, "direction", direction)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeSearchCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeSearchCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetLikers200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetLikers200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetLikers200Response](&response)
        if err == nil {
            result = response.Body.(GetLikers200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPISetMergeConfigRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    scmId string
    restPullRequestSettings *RestPullRequestSettings
}

    // the settings
func (r *PullRequestsAPISetMergeConfigRequest) RestPullRequestSettings(restPullRequestSettings RestPullRequestSettings) *PullRequestsAPISetMergeConfigRequest {
    r.restPullRequestSettings = &restPullRequestSettings
    return r
}

func (r *PullRequestsAPISetMergeConfigRequest) Execute() (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.SetMergeConfigExecute(r)
}

func (a *PullRequestsAPIRepository) SetMergeConfigRequest(ctx context.Context, scmId string) PullRequestsAPISetMergeConfigRequest {
    return PullRequestsAPISetMergeConfigRequest{
        ApiService: a,
        ctx: ctx,
        scmId: scmId,
    }
}

func (a *PullRequestsAPIRepository) SetMergeConfigExecute(r *PullRequestsAPISetMergeConfigRequest) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/admin/pull-requests/{scmId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{scmId}", urlUtil.PathEscape(r.scmId))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeSetMergeConfigCall(r.ctx, requestURL, r.restPullRequestSettings)
}

func (a *PullRequestsAPIRepository) SetMergeConfig(ctx context.Context, scmId string, restPullRequestSettings RestPullRequestSettings) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/admin/pull-requests/{scmId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{scmId}", urlUtil.PathEscape(scmId))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeSetMergeConfigCall(ctx, requestURL, restPullRequestSettings)
}

func (a *PullRequestsAPIRepository) makeSetMergeConfigCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestMergeConfig, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestPullRequestMergeConfig
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestMergeConfig](&response)
        if err == nil {
            result = response.Body.(RestPullRequestMergeConfig)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIStreamChanges1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    sinceId *string
    changeScope *string
    untilId *string
    withComments *string
    start *float32
    limit *float32
}

    // The since commit hash to stream changes for a RANGE arbitrary change scope
func (r *PullRequestsAPIStreamChanges1Request) SinceId(sinceId string) *PullRequestsAPIStreamChanges1Request {
    r.sinceId = &sinceId
    return r
}

    // UNREVIEWED to stream the unreviewed changes for the current user (if they exist); RANGE to stream changes between two arbitrary commits (requires &#39;sinceId&#39; and &#39;untilId&#39;); otherwise ALL to stream all changes (the default)
func (r *PullRequestsAPIStreamChanges1Request) ChangeScope(changeScope string) *PullRequestsAPIStreamChanges1Request {
    r.changeScope = &changeScope
    return r
}

    // The until commit hash to stream changes for a RANGE arbitrary change scope
func (r *PullRequestsAPIStreamChanges1Request) UntilId(untilId string) *PullRequestsAPIStreamChanges1Request {
    r.untilId = &untilId
    return r
}

    // true to apply comment counts in the changes (the default); otherwise, false to stream changes without comment counts
func (r *PullRequestsAPIStreamChanges1Request) WithComments(withComments string) *PullRequestsAPIStreamChanges1Request {
    r.withComments = &withComments
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIStreamChanges1Request) Start(start float32) *PullRequestsAPIStreamChanges1Request {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIStreamChanges1Request) Limit(limit float32) *PullRequestsAPIStreamChanges1Request {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIStreamChanges1Request) Execute() (RestChange, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.StreamChanges1Execute(r)
}

func (a *PullRequestsAPIRepository) StreamChanges1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamChanges1Request {
    return PullRequestsAPIStreamChanges1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) StreamChanges1Execute(r *PullRequestsAPIStreamChanges1Request) (RestChange, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.sinceId!=nil {
        withUrlQueryParam(requestURL, "sinceId", *r.sinceId)
    }
    if r.changeScope!=nil {
        withUrlQueryParam(requestURL, "changeScope", *r.changeScope)
    }
    if r.untilId!=nil {
        withUrlQueryParam(requestURL, "untilId", *r.untilId)
    }
    if r.withComments!=nil {
        withUrlQueryParam(requestURL, "withComments", *r.withComments)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeStreamChanges1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) StreamChanges1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, sinceId string, changeScope string, untilId string, withComments string, start float32, limit float32) (RestChange, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/changes"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "sinceId", sinceId)
    withUrlQueryParam(requestURL, "changeScope", changeScope)
    withUrlQueryParam(requestURL, "untilId", untilId)
    withUrlQueryParam(requestURL, "withComments", withComments)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeStreamChanges1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeStreamChanges1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestChange, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestChange
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestChange](&response)
        if err == nil {
            result = response.Body.(RestChange)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIStreamDiff2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    path string
    projectKey string
    pullRequestId string
    repositorySlug string
    avatarScheme *string
    contextLines *string
    sinceId *string
    srcPath *string
    diffType *string
    untilId *string
    whitespace *string
    withComments *string
    avatarSize *string
    start *float32
    limit *float32
}

    // The security scheme for avatar URLs. If the scheme is not present then it is inherited from the request. It can be set to \&quot;https\&quot; to force the use of secure URLs. Not applicable if streaming raw diff
func (r *PullRequestsAPIStreamDiff2Request) AvatarScheme(avatarScheme string) *PullRequestsAPIStreamDiff2Request {
    r.avatarScheme = &avatarScheme
    return r
}

    // The number of context lines to include around added/removed lines in the diff
func (r *PullRequestsAPIStreamDiff2Request) ContextLines(contextLines string) *PullRequestsAPIStreamDiff2Request {
    r.contextLines = &contextLines
    return r
}

    // The since commit hash to stream a diff between two arbitrary hashes
func (r *PullRequestsAPIStreamDiff2Request) SinceId(sinceId string) *PullRequestsAPIStreamDiff2Request {
    r.sinceId = &sinceId
    return r
}

    // The previous path to the file, if the file has been copied, moved or renamed
func (r *PullRequestsAPIStreamDiff2Request) SrcPath(srcPath string) *PullRequestsAPIStreamDiff2Request {
    r.srcPath = &srcPath
    return r
}

    // The type of diff being requested. When withComments is true this works as a hint to the system to attach the correct set of comments to the diff. Not applicable if streaming raw diff
func (r *PullRequestsAPIStreamDiff2Request) DiffType(diffType string) *PullRequestsAPIStreamDiff2Request {
    r.diffType = &diffType
    return r
}

    // The until commit hash to stream a diff between two arbitrary hashes
func (r *PullRequestsAPIStreamDiff2Request) UntilId(untilId string) *PullRequestsAPIStreamDiff2Request {
    r.untilId = &untilId
    return r
}

    // Optional whitespace flag which can be set to &lt;code&gt;ignore-all&lt;/code&gt;
func (r *PullRequestsAPIStreamDiff2Request) Whitespace(whitespace string) *PullRequestsAPIStreamDiff2Request {
    r.whitespace = &whitespace
    return r
}

    // &lt;code&gt;true&lt;/code&gt; to embed comments in the diff (the default); otherwise, &lt;code&gt;false&lt;/code&gt; to stream the diff without comments. Not applicable if streaming raw diff
func (r *PullRequestsAPIStreamDiff2Request) WithComments(withComments string) *PullRequestsAPIStreamDiff2Request {
    r.withComments = &withComments
    return r
}

    // If present the service adds avatar URLs for comment authors where the provided value specifies the desired avatar size in pixels. Not applicable if streaming raw diff
func (r *PullRequestsAPIStreamDiff2Request) AvatarSize(avatarSize string) *PullRequestsAPIStreamDiff2Request {
    r.avatarSize = &avatarSize
    return r
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *PullRequestsAPIStreamDiff2Request) Start(start float32) *PullRequestsAPIStreamDiff2Request {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *PullRequestsAPIStreamDiff2Request) Limit(limit float32) *PullRequestsAPIStreamDiff2Request {
    r.limit = &limit
    return r
}

func (r *PullRequestsAPIStreamDiff2Request) Execute() (StreamDiff1200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.StreamDiff2Execute(r)
}

func (a *PullRequestsAPIRepository) StreamDiff2Request(ctx context.Context, path string, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamDiff2Request {
    return PullRequestsAPIStreamDiff2Request{
        ApiService: a,
        ctx: ctx,
        path: path,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) StreamDiff2Execute(r *PullRequestsAPIStreamDiff2Request) (StreamDiff1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{path}", urlUtil.PathEscape(r.path))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.avatarScheme!=nil {
        withUrlQueryParam(requestURL, "avatarScheme", *r.avatarScheme)
    }
    if r.contextLines!=nil {
        withUrlQueryParam(requestURL, "contextLines", *r.contextLines)
    }
    if r.sinceId!=nil {
        withUrlQueryParam(requestURL, "sinceId", *r.sinceId)
    }
    if r.srcPath!=nil {
        withUrlQueryParam(requestURL, "srcPath", *r.srcPath)
    }
    if r.diffType!=nil {
        withUrlQueryParam(requestURL, "diffType", *r.diffType)
    }
    if r.untilId!=nil {
        withUrlQueryParam(requestURL, "untilId", *r.untilId)
    }
    if r.whitespace!=nil {
        withUrlQueryParam(requestURL, "whitespace", *r.whitespace)
    }
    if r.withComments!=nil {
        withUrlQueryParam(requestURL, "withComments", *r.withComments)
    }
    if r.avatarSize!=nil {
        withUrlQueryParam(requestURL, "avatarSize", *r.avatarSize)
    }
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeStreamDiff2Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) StreamDiff2(ctx context.Context, path string, projectKey string, pullRequestId string, repositorySlug string, avatarScheme string, contextLines string, sinceId string, srcPath string, diffType string, untilId string, whitespace string, withComments string, avatarSize string, start float32, limit float32) (StreamDiff1200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/diff/{path}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{path}", urlUtil.PathEscape(path))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "avatarScheme", avatarScheme)
    withUrlQueryParam(requestURL, "contextLines", contextLines)
    withUrlQueryParam(requestURL, "sinceId", sinceId)
    withUrlQueryParam(requestURL, "srcPath", srcPath)
    withUrlQueryParam(requestURL, "diffType", diffType)
    withUrlQueryParam(requestURL, "untilId", untilId)
    withUrlQueryParam(requestURL, "whitespace", whitespace)
    withUrlQueryParam(requestURL, "withComments", withComments)
    withUrlQueryParam(requestURL, "avatarSize", avatarSize)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeStreamDiff2Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeStreamDiff2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (StreamDiff1200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result StreamDiff1200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[StreamDiff1200Response](&response)
        if err == nil {
            result = response.Body.(StreamDiff1200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIStreamPatch1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIStreamPatch1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.StreamPatch1Execute(r)
}

func (a *PullRequestsAPIRepository) StreamPatch1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamPatch1Request {
    return PullRequestsAPIStreamPatch1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) StreamPatch1Execute(r *PullRequestsAPIStreamPatch1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.patch"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeStreamPatch1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) StreamPatch1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.patch"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeStreamPatch1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeStreamPatch1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIStreamRawDiff2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    contextLines *string
    whitespace *string
}

    // The number of context lines to include around added/removed lines in the diff
func (r *PullRequestsAPIStreamRawDiff2Request) ContextLines(contextLines string) *PullRequestsAPIStreamRawDiff2Request {
    r.contextLines = &contextLines
    return r
}

    // optional whitespace flag which can be set to &lt;code&gt;ignore-all&lt;/code&gt;
func (r *PullRequestsAPIStreamRawDiff2Request) Whitespace(whitespace string) *PullRequestsAPIStreamRawDiff2Request {
    r.whitespace = &whitespace
    return r
}

func (r *PullRequestsAPIStreamRawDiff2Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.StreamRawDiff2Execute(r)
}

func (a *PullRequestsAPIRepository) StreamRawDiff2Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIStreamRawDiff2Request {
    return PullRequestsAPIStreamRawDiff2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) StreamRawDiff2Execute(r *PullRequestsAPIStreamRawDiff2Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.diff"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.contextLines!=nil {
        withUrlQueryParam(requestURL, "contextLines", *r.contextLines)
    }
    if r.whitespace!=nil {
        withUrlQueryParam(requestURL, "whitespace", *r.whitespace)
    }
    return a.makeStreamRawDiff2Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) StreamRawDiff2(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, contextLines string, whitespace string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}.diff"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "contextLines", contextLines)
    withUrlQueryParam(requestURL, "whitespace", whitespace)
    return a.makeStreamRawDiff2Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeStreamRawDiff2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 400 {
		return response, nil
    }
    if response.Status == 404 {
		return response, nil
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPITryAutoMergeRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPITryAutoMergeRequest) Execute() (RestAutoMergeProcessingResult, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.TryAutoMergeExecute(r)
}

func (a *PullRequestsAPIRepository) TryAutoMergeRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPITryAutoMergeRequest {
    return PullRequestsAPITryAutoMergeRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) TryAutoMergeExecute(r *PullRequestsAPITryAutoMergeRequest) (RestAutoMergeProcessingResult, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeTryAutoMergeCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) TryAutoMerge(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestAutoMergeProcessingResult, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/auto-merge"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeTryAutoMergeCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeTryAutoMergeCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestAutoMergeProcessingResult, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestAutoMergeProcessingResult
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 403 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestAutoMergeProcessingResult](&response)
        if err == nil {
            result = response.Body.(RestAutoMergeProcessingResult)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUnReact1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    emoticon string
    repositorySlug string
}

func (r *PullRequestsAPIUnReact1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UnReact1Execute(r)
}

func (a *PullRequestsAPIRepository) UnReact1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) PullRequestsAPIUnReact1Request {
    return PullRequestsAPIUnReact1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        emoticon: emoticon,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) UnReact1Execute(r *PullRequestsAPIUnReact1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/reactions/{emoticon}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{emoticon}", urlUtil.PathEscape(r.emoticon))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUnReact1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) UnReact1(ctx context.Context, projectKey string, commentId string, pullRequestId string, emoticon string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/comment-likes/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}/reactions/{emoticon}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{emoticon}", urlUtil.PathEscape(emoticon))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUnReact1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeUnReact1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIUnassignParticipantRoleRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    userSlug string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIUnassignParticipantRoleRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UnassignParticipantRoleExecute(r)
}

func (a *PullRequestsAPIRepository) UnassignParticipantRoleRequest(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string) PullRequestsAPIUnassignParticipantRoleRequest {
    return PullRequestsAPIUnassignParticipantRoleRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        userSlug: userSlug,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) UnassignParticipantRoleExecute(r *PullRequestsAPIUnassignParticipantRoleRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{userSlug}", urlUtil.PathEscape(r.userSlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUnassignParticipantRoleCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) UnassignParticipantRole(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{userSlug}", urlUtil.PathEscape(userSlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUnassignParticipantRoleCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeUnassignParticipantRoleCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIUnassignParticipantRole1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    username *string
}

func (r *PullRequestsAPIUnassignParticipantRole1Request) Username(username string) *PullRequestsAPIUnassignParticipantRole1Request {
    r.username = &username
    return r
}

func (r *PullRequestsAPIUnassignParticipantRole1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UnassignParticipantRole1Execute(r)
}

func (a *PullRequestsAPIRepository) UnassignParticipantRole1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIUnassignParticipantRole1Request {
    return PullRequestsAPIUnassignParticipantRole1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

// Deprecated
func (a *PullRequestsAPIRepository) UnassignParticipantRole1Execute(r *PullRequestsAPIUnassignParticipantRole1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.username!=nil {
        withUrlQueryParam(requestURL, "username", *r.username)
    }
    return a.makeUnassignParticipantRole1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) UnassignParticipantRole1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, username string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "username", username)
    return a.makeUnassignParticipantRole1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeUnassignParticipantRole1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIUnwatch1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIUnwatch1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Unwatch1Execute(r)
}

func (a *PullRequestsAPIRepository) Unwatch1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIUnwatch1Request {
    return PullRequestsAPIUnwatch1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) Unwatch1Execute(r *PullRequestsAPIUnwatch1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUnwatch1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) Unwatch1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUnwatch1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeUnwatch1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIUpdateRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
    restPullRequest *RestPullRequest
}

    // The updated pull request
func (r *PullRequestsAPIUpdateRequest) RestPullRequest(restPullRequest RestPullRequest) *PullRequestsAPIUpdateRequest {
    r.restPullRequest = &restPullRequest
    return r
}

func (r *PullRequestsAPIUpdateRequest) Execute() (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UpdateExecute(r)
}

func (a *PullRequestsAPIRepository) UpdateRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateRequest {
    return PullRequestsAPIUpdateRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) UpdateExecute(r *PullRequestsAPIUpdateRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateCall(r.ctx, requestURL, r.restPullRequest)
}

func (a *PullRequestsAPIRepository) Update(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string, restPullRequest RestPullRequest) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateCall(ctx, requestURL, restPullRequest)
}

func (a *PullRequestsAPIRepository) makeUpdateCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequest, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestPullRequest
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequest](&response)
        if err == nil {
            result = response.Body.(RestPullRequest)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUpdate1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
    restReviewerGroup *RestReviewerGroup
}

    // The request containing the attributes of the reviewer group to be updated. Only the attributes to be updated need to be present in this object.
func (r *PullRequestsAPIUpdate1Request) RestReviewerGroup(restReviewerGroup RestReviewerGroup) *PullRequestsAPIUpdate1Request {
    r.restReviewerGroup = &restReviewerGroup
    return r
}

func (r *PullRequestsAPIUpdate1Request) Execute() (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Update1Execute(r)
}

func (a *PullRequestsAPIRepository) Update1Request(ctx context.Context, projectKey string, id string) PullRequestsAPIUpdate1Request {
    return PullRequestsAPIUpdate1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
    }
}

func (a *PullRequestsAPIRepository) Update1Execute(r *PullRequestsAPIUpdate1Request) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdate1Call(r.ctx, requestURL, r.restReviewerGroup)
}

func (a *PullRequestsAPIRepository) Update1(ctx context.Context, projectKey string, id string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdate1Call(ctx, requestURL, restReviewerGroup)
}

func (a *PullRequestsAPIRepository) makeUpdate1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestReviewerGroup
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestReviewerGroup](&response)
        if err == nil {
            result = response.Body.(RestReviewerGroup)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUpdate2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
    repositorySlug string
    restReviewerGroup *RestReviewerGroup
}

    // The request containing the attributes of the reviewer group to be updated. Only the attributes to be updated need to be present in this object.
func (r *PullRequestsAPIUpdate2Request) RestReviewerGroup(restReviewerGroup RestReviewerGroup) *PullRequestsAPIUpdate2Request {
    r.restReviewerGroup = &restReviewerGroup
    return r
}

func (r *PullRequestsAPIUpdate2Request) Execute() (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Update2Execute(r)
}

func (a *PullRequestsAPIRepository) Update2Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIUpdate2Request {
    return PullRequestsAPIUpdate2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) Update2Execute(r *PullRequestsAPIUpdate2Request) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdate2Call(r.ctx, requestURL, r.restReviewerGroup)
}

func (a *PullRequestsAPIRepository) Update2(ctx context.Context, projectKey string, id string, repositorySlug string, restReviewerGroup RestReviewerGroup) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/settings/reviewer-groups/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdate2Call(ctx, requestURL, restReviewerGroup)
}

func (a *PullRequestsAPIRepository) makeUpdate2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestReviewerGroup, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestReviewerGroup
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestReviewerGroup](&response)
        if err == nil {
            result = response.Body.(RestReviewerGroup)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUpdateComment1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    repositorySlug string
    restComment *RestComment
}

    // The comment to add.
func (r *PullRequestsAPIUpdateComment1Request) RestComment(restComment RestComment) *PullRequestsAPIUpdateComment1Request {
    r.restComment = &restComment
    return r
}

func (r *PullRequestsAPIUpdateComment1Request) Execute() (RestComment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UpdateComment1Execute(r)
}

func (a *PullRequestsAPIRepository) UpdateComment1Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateComment1Request {
    return PullRequestsAPIUpdateComment1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) UpdateComment1Execute(r *PullRequestsAPIUpdateComment1Request) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateComment1Call(r.ctx, requestURL, r.restComment)
}

func (a *PullRequestsAPIRepository) UpdateComment1(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/blocker-comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateComment1Call(ctx, requestURL, restComment)
}

func (a *PullRequestsAPIRepository) makeUpdateComment1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestComment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestComment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestComment](&response)
        if err == nil {
            result = response.Body.(RestComment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUpdateComment2Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    commentId string
    pullRequestId string
    repositorySlug string
    restComment *RestComment
}

    // The updated comment
func (r *PullRequestsAPIUpdateComment2Request) RestComment(restComment RestComment) *PullRequestsAPIUpdateComment2Request {
    r.restComment = &restComment
    return r
}

func (r *PullRequestsAPIUpdateComment2Request) Execute() (RestComment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UpdateComment2Execute(r)
}

func (a *PullRequestsAPIRepository) UpdateComment2Request(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateComment2Request {
    return PullRequestsAPIUpdateComment2Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commentId: commentId,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) UpdateComment2Execute(r *PullRequestsAPIUpdateComment2Request) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(r.commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateComment2Call(r.ctx, requestURL, r.restComment)
}

func (a *PullRequestsAPIRepository) UpdateComment2(ctx context.Context, projectKey string, commentId string, pullRequestId string, repositorySlug string, restComment RestComment) (RestComment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/comments/{commentId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commentId}", urlUtil.PathEscape(commentId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateComment2Call(ctx, requestURL, restComment)
}

func (a *PullRequestsAPIRepository) makeUpdateComment2Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestComment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestComment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestComment](&response)
        if err == nil {
            result = response.Body.(RestComment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUpdatePullRequestConditionRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
    restDefaultReviewersRequest *RestDefaultReviewersRequest
}

    // The new details for the default reviewer pull request condition.
func (r *PullRequestsAPIUpdatePullRequestConditionRequest) RestDefaultReviewersRequest(restDefaultReviewersRequest RestDefaultReviewersRequest) *PullRequestsAPIUpdatePullRequestConditionRequest {
    r.restDefaultReviewersRequest = &restDefaultReviewersRequest
    return r
}

func (r *PullRequestsAPIUpdatePullRequestConditionRequest) Execute() (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UpdatePullRequestConditionExecute(r)
}

func (a *PullRequestsAPIRepository) UpdatePullRequestConditionRequest(ctx context.Context, projectKey string, id string) PullRequestsAPIUpdatePullRequestConditionRequest {
    return PullRequestsAPIUpdatePullRequestConditionRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
    }
}

func (a *PullRequestsAPIRepository) UpdatePullRequestConditionExecute(r *PullRequestsAPIUpdatePullRequestConditionRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdatePullRequestConditionCall(r.ctx, requestURL, r.restDefaultReviewersRequest)
}

func (a *PullRequestsAPIRepository) UpdatePullRequestCondition(ctx context.Context, projectKey string, id string, restDefaultReviewersRequest RestDefaultReviewersRequest) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdatePullRequestConditionCall(ctx, requestURL, restDefaultReviewersRequest)
}

func (a *PullRequestsAPIRepository) makeUpdatePullRequestConditionCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestPullRequestCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestCondition](&response)
        if err == nil {
            result = response.Body.(RestPullRequestCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUpdatePullRequestCondition1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    id string
    repositorySlug string
    updatePullRequestCondition1Request *UpdatePullRequestCondition1Request
}

func (r *PullRequestsAPIUpdatePullRequestCondition1Request) UpdatePullRequestCondition1Request(updatePullRequestCondition1Request UpdatePullRequestCondition1Request) *PullRequestsAPIUpdatePullRequestCondition1Request {
    r.updatePullRequestCondition1Request = &updatePullRequestCondition1Request
    return r
}

func (r *PullRequestsAPIUpdatePullRequestCondition1Request) Execute() (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UpdatePullRequestCondition1Execute(r)
}

func (a *PullRequestsAPIRepository) UpdatePullRequestCondition1Request(ctx context.Context, projectKey string, id string, repositorySlug string) PullRequestsAPIUpdatePullRequestCondition1Request {
    return PullRequestsAPIUpdatePullRequestCondition1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) UpdatePullRequestCondition1Execute(r *PullRequestsAPIUpdatePullRequestCondition1Request) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(r.id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdatePullRequestCondition1Call(r.ctx, requestURL, r.updatePullRequestCondition1Request)
}

func (a *PullRequestsAPIRepository) UpdatePullRequestCondition1(ctx context.Context, projectKey string, id string, repositorySlug string, updatePullRequestCondition1Request UpdatePullRequestCondition1Request) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/default-reviewers/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(id))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdatePullRequestCondition1Call(ctx, requestURL, updatePullRequestCondition1Request)
}

func (a *PullRequestsAPIRepository) makeUpdatePullRequestCondition1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestPullRequestCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestCondition](&response)
        if err == nil {
            result = response.Body.(RestPullRequestCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIUpdateStatusRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    userSlug string
    pullRequestId string
    repositorySlug string
    restPullRequestAssignStatusRequest *RestPullRequestAssignStatusRequest
    version *string
}

    // The participant representing the status to set, includes the status of the participant
func (r *PullRequestsAPIUpdateStatusRequest) RestPullRequestAssignStatusRequest(restPullRequestAssignStatusRequest RestPullRequestAssignStatusRequest) *PullRequestsAPIUpdateStatusRequest {
    r.restPullRequestAssignStatusRequest = &restPullRequestAssignStatusRequest
    return r
}

    // The current version of the pull request. If the server&#39;s version isn&#39;t the same as the specified version the operation will fail. To determine the current version of the pull request it should be fetched from the server prior to this operation. Look for the &#39;version&#39; attribute in the returned JSON structure.
func (r *PullRequestsAPIUpdateStatusRequest) Version(version string) *PullRequestsAPIUpdateStatusRequest {
    r.version = &version
    return r
}

func (r *PullRequestsAPIUpdateStatusRequest) Execute() (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UpdateStatusExecute(r)
}

func (a *PullRequestsAPIRepository) UpdateStatusRequest(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string) PullRequestsAPIUpdateStatusRequest {
    return PullRequestsAPIUpdateStatusRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        userSlug: userSlug,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) UpdateStatusExecute(r *PullRequestsAPIUpdateStatusRequest) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{userSlug}", urlUtil.PathEscape(r.userSlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.version!=nil {
        withUrlQueryParam(requestURL, "version", *r.version)
    }
    return a.makeUpdateStatusCall(r.ctx, requestURL, r.restPullRequestAssignStatusRequest)
}

func (a *PullRequestsAPIRepository) UpdateStatus(ctx context.Context, projectKey string, userSlug string, pullRequestId string, repositorySlug string, restPullRequestAssignStatusRequest RestPullRequestAssignStatusRequest, version string) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/participants/{userSlug}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{userSlug}", urlUtil.PathEscape(userSlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "version", version)
    return a.makeUpdateStatusCall(ctx, requestURL, restPullRequestAssignStatusRequest)
}

func (a *PullRequestsAPIRepository) makeUpdateStatusCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestPullRequestParticipant
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestParticipant](&response)
        if err == nil {
            result = response.Body.(RestPullRequestParticipant)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type PullRequestsAPIWatch1Request struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIWatch1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Watch1Execute(r)
}

func (a *PullRequestsAPIRepository) Watch1Request(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIWatch1Request {
    return PullRequestsAPIWatch1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

func (a *PullRequestsAPIRepository) Watch1Execute(r *PullRequestsAPIWatch1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeWatch1Call(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) Watch1(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/watch"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeWatch1Call(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeWatch1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type PullRequestsAPIWithdrawApprovalRequest struct {
    ctx context.Context
    ApiService *PullRequestsAPIRepository
    projectKey string
    pullRequestId string
    repositorySlug string
}

func (r *PullRequestsAPIWithdrawApprovalRequest) Execute() (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.WithdrawApprovalExecute(r)
}

func (a *PullRequestsAPIRepository) WithdrawApprovalRequest(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) PullRequestsAPIWithdrawApprovalRequest {
    return PullRequestsAPIWithdrawApprovalRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        pullRequestId: pullRequestId,
        repositorySlug: repositorySlug,
    }
}

// Deprecated
func (a *PullRequestsAPIRepository) WithdrawApprovalExecute(r *PullRequestsAPIWithdrawApprovalRequest) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(r.pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeWithdrawApprovalCall(r.ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) WithdrawApproval(ctx context.Context, projectKey string, pullRequestId string, repositorySlug string) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/pull-requests/{pullRequestId}/approve"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{pullRequestId}", urlUtil.PathEscape(pullRequestId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeWithdrawApprovalCall(ctx, requestURL, nil)
}

func (a *PullRequestsAPIRepository) makeWithdrawApprovalCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestPullRequestParticipant, aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    var result RestPullRequestParticipant
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 409 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestPullRequestParticipant](&response)
        if err == nil {
            result = response.Body.(RestPullRequestParticipant)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}

type PullRequestsAPIRepository struct {
    ApiClient *ApiClient
}

func (c *PullRequestsAPIRepository) baseUrl() string {
    return c.ApiClient.BaseUrl
}

func (c *PullRequestsAPIRepository) httpClient() aurestclientapi.Client {
    return c.ApiClient.Client
}

func NewPullRequestsAPI(client *ApiClient) PullRequestsAPI {
    return &PullRequestsAPIRepository{ApiClient: client}
}
