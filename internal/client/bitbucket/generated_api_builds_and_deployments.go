/*
Bitbucket Data Center

This is the reference document for the Atlassian Bitbucket REST API. The REST API is for developers who want to:    - integrate Bitbucket with other applications;   - create scripts that interact with Bitbucket; or   - develop plugins that enhance the Bitbucket UI, using REST to interact with the backend.    You can read more about developing Bitbucket plugins in the [Bitbucket Developer Documentation](https://developer.atlassian.com/bitbucket/server/docs/latest/).

API version: 8.19
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package bitbucketclient

import (
    "context"
    "fmt"
    aurestclientapi "github.com/StephanHCB/go-autumn-restclient/api"
    "net/http"
    urlUtil "net/url"
    "strings"
)

type BuildsAndDeploymentsAPI interface {

    /*
       Add Store a build status
    */
    Add(ctx context.Context, projectKey string, commitId string, repositorySlug string, restBuildStatusSetRequest RestBuildStatusSetRequest) (aurestclientapi.ParsedResponse, error)

    // AddExecutes the request
    AddRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIAddRequest

    /*
       AddAnnotations Add Code Insights annotations
    */
    AddAnnotations(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string, restBulkAddInsightAnnotationRequest RestBulkAddInsightAnnotationRequest) (aurestclientapi.ParsedResponse, error)

    // AddAnnotationsExecutes the request
    AddAnnotationsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIAddAnnotationsRequest

    /*
       CreateOrUpdateDeployment Create or update a deployment
    */
    CreateOrUpdateDeployment(ctx context.Context, projectKey string, commitId string, repositorySlug string, restDeploymentSetRequest RestDeploymentSetRequest) (RestDeployment, aurestclientapi.ParsedResponse, error)

    // CreateOrUpdateDeploymentExecutes the request
    // @return RestDeployment
    CreateOrUpdateDeploymentRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest

    /*
       CreateRequiredBuildsMergeCheck Create a required builds merge check
    */
    CreateRequiredBuildsMergeCheck(ctx context.Context, projectKey string, repositorySlug string, restRequiredBuildConditionSetRequest RestRequiredBuildConditionSetRequest) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error)

    // CreateRequiredBuildsMergeCheckExecutes the request
    // @return RestRequiredBuildCondition
    CreateRequiredBuildsMergeCheckRequest(ctx context.Context, projectKey string, repositorySlug string) BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest

    /*
       Delete Delete a specific build status
    */
    Delete(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (aurestclientapi.ParsedResponse, error)

    // DeleteExecutes the request
    DeleteRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIDeleteRequest

    /*
       Delete1 Delete a deployment
    */
    Delete1(ctx context.Context, projectKey string, commitId string, repositorySlug string, deploymentSequenceNumber string, key string, environmentKey string) (aurestclientapi.ParsedResponse, error)

    // Delete1Executes the request
    Delete1Request(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIDelete1Request

    /*
       DeleteACodeInsightsReport Delete a Code Insights report
    */
    DeleteACodeInsightsReport(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (aurestclientapi.ParsedResponse, error)

    // DeleteACodeInsightsReportExecutes the request
    DeleteACodeInsightsReportRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIDeleteACodeInsightsReportRequest

    /*
       DeleteAnnotations Delete Code Insights annotations
    */
    DeleteAnnotations(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string, externalId string) (aurestclientapi.ParsedResponse, error)

    // DeleteAnnotationsExecutes the request
    DeleteAnnotationsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIDeleteAnnotationsRequest

    /*
       DeleteRequiredBuildsMergeCheck Delete a required builds merge check
    */
    DeleteRequiredBuildsMergeCheck(ctx context.Context, projectKey string, id int64, repositorySlug string) (aurestclientapi.ParsedResponse, error)

    // DeleteRequiredBuildsMergeCheckExecutes the request
    DeleteRequiredBuildsMergeCheckRequest(ctx context.Context, projectKey string, id int64, repositorySlug string) BuildsAndDeploymentsAPIDeleteRequiredBuildsMergeCheckRequest

    /*
       Get Get a specific build status
    */
    Get(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (RestBuildStatus, aurestclientapi.ParsedResponse, error)

    // GetExecutes the request
    // @return RestBuildStatus
    GetRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGetRequest

    /*
       Get1 Get a deployment
    */
    Get1(ctx context.Context, projectKey string, commitId string, repositorySlug string, deploymentSequenceNumber string, key string, environmentKey string) (RestDeployment, aurestclientapi.ParsedResponse, error)

    // Get1Executes the request
    // @return RestDeployment
    Get1Request(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGet1Request

    /*
       GetACodeInsightsReport Get a Code Insights report
    */
    GetACodeInsightsReport(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (RestInsightReport, aurestclientapi.ParsedResponse, error)

    // GetACodeInsightsReportExecutes the request
    // @return RestInsightReport
    GetACodeInsightsReportRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIGetACodeInsightsReportRequest

    /*
       GetAnnotations Get Code Insights annotations for a commit
    */
    GetAnnotations(ctx context.Context, projectKey string, commitId string, repositorySlug string, severity string, path string, externalId string, type_ string, key string) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error)

    // GetAnnotationsExecutes the request
    // @return RestInsightAnnotationsResponse
    GetAnnotationsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGetAnnotationsRequest

    /*
       GetAnnotations1 Get Code Insights annotations for a report
    */
    GetAnnotations1(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error)

    // GetAnnotations1Executes the request
    // @return RestInsightAnnotationsResponse
    GetAnnotations1Request(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIGetAnnotations1Request

    /*
       GetBuildStatusStats Get build status statistics for commit
    */
    GetBuildStatusStats(ctx context.Context, commitId string, includeUnique bool) (RestBuildStats, aurestclientapi.ParsedResponse, error)

    // GetBuildStatusStatsExecutes the request
    // @return RestBuildStats
    GetBuildStatusStatsRequest(ctx context.Context, commitId string) BuildsAndDeploymentsAPIGetBuildStatusStatsRequest

    /*
       GetMultipleBuildStatusStats Get build status statistics for multiple commits
    */
    GetMultipleBuildStatusStats(ctx context.Context, requestBody []string) (interface{}, aurestclientapi.ParsedResponse, error)

    // GetMultipleBuildStatusStatsExecutes the request
    // @return interface{}
    GetMultipleBuildStatusStatsRequest(ctx context.Context) BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest

    /*
       GetPageOfRequiredBuildsMergeChecks Get required builds merge checks
    */
    GetPageOfRequiredBuildsMergeChecks(ctx context.Context, projectKey string, repositorySlug string, start float32, limit float32) (GetPageOfRequiredBuildsMergeChecks200Response, aurestclientapi.ParsedResponse, error)

    // GetPageOfRequiredBuildsMergeChecksExecutes the request
    // @return GetPageOfRequiredBuildsMergeChecks200Response
    GetPageOfRequiredBuildsMergeChecksRequest(ctx context.Context, projectKey string, repositorySlug string) BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest

    /*
       GetReports Get all Code Insights reports for a commit
    */
    GetReports(ctx context.Context, projectKey string, commitId string, repositorySlug string, start float32, limit float32) (GetReports200Response, aurestclientapi.ParsedResponse, error)

    // GetReportsExecutes the request
    // @return GetReports200Response
    GetReportsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGetReportsRequest

    /*
       SetACodeInsightsReport Create a Code Insights report
    */
    SetACodeInsightsReport(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string, restSetInsightReportRequest RestSetInsightReportRequest) (RestInsightReport, aurestclientapi.ParsedResponse, error)

    // SetACodeInsightsReportExecutes the request
    // @return RestInsightReport
    SetACodeInsightsReportRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPISetACodeInsightsReportRequest

    /*
       SetAnnotation Create or replace a Code Insights annotation
    */
    SetAnnotation(ctx context.Context, projectKey string, externalId string, commitId string, repositorySlug string, key string, restSingleAddInsightAnnotationRequest RestSingleAddInsightAnnotationRequest) (aurestclientapi.ParsedResponse, error)

    // SetAnnotationExecutes the request
    SetAnnotationRequest(ctx context.Context, projectKey string, externalId string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPISetAnnotationRequest

    /*
       UpdateRequiredBuildsMergeCheck Update a required builds merge check
    */
    UpdateRequiredBuildsMergeCheck(ctx context.Context, projectKey string, id int64, repositorySlug string, restRequiredBuildConditionSetRequest RestRequiredBuildConditionSetRequest) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error)

    // UpdateRequiredBuildsMergeCheckExecutes the request
    // @return RestRequiredBuildCondition
    UpdateRequiredBuildsMergeCheckRequest(ctx context.Context, projectKey string, id int64, repositorySlug string) BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest
}

 type BuildsAndDeploymentsAPIAddRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    restBuildStatusSetRequest *RestBuildStatusSetRequest
}

    // The contents of the build status request are: These fields are **required**:   - **key**: The string referring to this branch plan/job - **state**: The build status state, one of: \&quot;SUCCESSFUL\&quot;, \&quot;FAILED\&quot;, \&quot;INPROGRESS\&quot;, \&quot;CANCELLED\&quot;, \&quot;UNKNOWN\&quot; - **url**: URL referring to the build result page in the CI tool.   These fields are optional:   - **buildNumber** (optional): A unique identifier for this particular run of a plan&lt; - **dateAdded** (optional): milliseconds since epoch. If not provided current date is used. - **description** (optional): Describes the build result - **duration** (optional): Duration of a completed build in milliseconds. - **name** (optional): A short string that describes the build plan - **parent** (optional): The identifier for the plan or job that ran the branch plan that produced this build status. - **ref** (optional): The fully qualified git reference e.g. refs/heads/master. - **testResults** (optional): A summary of the passed, failed and skipped tests. 
func (r *BuildsAndDeploymentsAPIAddRequest) RestBuildStatusSetRequest(restBuildStatusSetRequest RestBuildStatusSetRequest) *BuildsAndDeploymentsAPIAddRequest {
    r.restBuildStatusSetRequest = &restBuildStatusSetRequest
    return r
}

func (r *BuildsAndDeploymentsAPIAddRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.AddExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) AddRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIAddRequest {
    return BuildsAndDeploymentsAPIAddRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) AddExecute(r *BuildsAndDeploymentsAPIAddRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeAddCall(r.ctx, requestURL, r.restBuildStatusSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) Add(ctx context.Context, projectKey string, commitId string, repositorySlug string, restBuildStatusSetRequest RestBuildStatusSetRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeAddCall(ctx, requestURL, restBuildStatusSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) makeAddCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPIAddAnnotationsRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key string
    restBulkAddInsightAnnotationRequest *RestBulkAddInsightAnnotationRequest
}

    // The annotations to add.
func (r *BuildsAndDeploymentsAPIAddAnnotationsRequest) RestBulkAddInsightAnnotationRequest(restBulkAddInsightAnnotationRequest RestBulkAddInsightAnnotationRequest) *BuildsAndDeploymentsAPIAddAnnotationsRequest {
    r.restBulkAddInsightAnnotationRequest = &restBulkAddInsightAnnotationRequest
    return r
}

func (r *BuildsAndDeploymentsAPIAddAnnotationsRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.AddAnnotationsExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) AddAnnotationsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIAddAnnotationsRequest {
    return BuildsAndDeploymentsAPIAddAnnotationsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
        key: key,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) AddAnnotationsExecute(r *BuildsAndDeploymentsAPIAddAnnotationsRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(r.key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeAddAnnotationsCall(r.ctx, requestURL, r.restBulkAddInsightAnnotationRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) AddAnnotations(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string, restBulkAddInsightAnnotationRequest RestBulkAddInsightAnnotationRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeAddAnnotationsCall(ctx, requestURL, restBulkAddInsightAnnotationRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) makeAddAnnotationsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    restDeploymentSetRequest *RestDeploymentSetRequest
}

    // the details of the deployment to create, as detailed by the request body
func (r *BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest) RestDeploymentSetRequest(restDeploymentSetRequest RestDeploymentSetRequest) *BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest {
    r.restDeploymentSetRequest = &restDeploymentSetRequest
    return r
}

func (r *BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest) Execute() (RestDeployment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CreateOrUpdateDeploymentExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) CreateOrUpdateDeploymentRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest {
    return BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) CreateOrUpdateDeploymentExecute(r *BuildsAndDeploymentsAPICreateOrUpdateDeploymentRequest) (RestDeployment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateOrUpdateDeploymentCall(r.ctx, requestURL, r.restDeploymentSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) CreateOrUpdateDeployment(ctx context.Context, projectKey string, commitId string, repositorySlug string, restDeploymentSetRequest RestDeploymentSetRequest) (RestDeployment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateOrUpdateDeploymentCall(ctx, requestURL, restDeploymentSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) makeCreateOrUpdateDeploymentCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestDeployment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestDeployment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestDeployment](&response)
        if err == nil {
            result = response.Body.(RestDeployment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    repositorySlug string
    restRequiredBuildConditionSetRequest *RestRequiredBuildConditionSetRequest
}

    // The request specifying the required build parent keys, ref matcher and exemption matcher
func (r *BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest) RestRequiredBuildConditionSetRequest(restRequiredBuildConditionSetRequest RestRequiredBuildConditionSetRequest) *BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest {
    r.restRequiredBuildConditionSetRequest = &restRequiredBuildConditionSetRequest
    return r
}

func (r *BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest) Execute() (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.CreateRequiredBuildsMergeCheckExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) CreateRequiredBuildsMergeCheckRequest(ctx context.Context, projectKey string, repositorySlug string) BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest {
    return BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) CreateRequiredBuildsMergeCheckExecute(r *BuildsAndDeploymentsAPICreateRequiredBuildsMergeCheckRequest) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateRequiredBuildsMergeCheckCall(r.ctx, requestURL, r.restRequiredBuildConditionSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) CreateRequiredBuildsMergeCheck(ctx context.Context, projectKey string, repositorySlug string, restRequiredBuildConditionSetRequest RestRequiredBuildConditionSetRequest) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeCreateRequiredBuildsMergeCheckCall(ctx, requestURL, restRequiredBuildConditionSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) makeCreateRequiredBuildsMergeCheckCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result RestRequiredBuildCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestRequiredBuildCondition](&response)
        if err == nil {
            result = response.Body.(RestRequiredBuildCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIDeleteRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key *string
}

    // the key of the build status
func (r *BuildsAndDeploymentsAPIDeleteRequest) Key(key string) *BuildsAndDeploymentsAPIDeleteRequest {
    r.key = &key
    return r
}

func (r *BuildsAndDeploymentsAPIDeleteRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeleteExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIDeleteRequest {
    return BuildsAndDeploymentsAPIDeleteRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteExecute(r *BuildsAndDeploymentsAPIDeleteRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.key!=nil {
        withUrlQueryParam(requestURL, "key", *r.key)
    }
    return a.makeDeleteCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) Delete(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "key", key)
    return a.makeDeleteCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeDeleteCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPIDelete1Request struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    deploymentSequenceNumber *string
    key *string
    environmentKey *string
}

    // the sequence number of the deployment, as detailed by the query parameter
func (r *BuildsAndDeploymentsAPIDelete1Request) DeploymentSequenceNumber(deploymentSequenceNumber string) *BuildsAndDeploymentsAPIDelete1Request {
    r.deploymentSequenceNumber = &deploymentSequenceNumber
    return r
}

    // the key of the deployment, as detailed by the query parameter
func (r *BuildsAndDeploymentsAPIDelete1Request) Key(key string) *BuildsAndDeploymentsAPIDelete1Request {
    r.key = &key
    return r
}

    // the key of the environment, as detailed by the query parameter
func (r *BuildsAndDeploymentsAPIDelete1Request) EnvironmentKey(environmentKey string) *BuildsAndDeploymentsAPIDelete1Request {
    r.environmentKey = &environmentKey
    return r
}

func (r *BuildsAndDeploymentsAPIDelete1Request) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Delete1Execute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) Delete1Request(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIDelete1Request {
    return BuildsAndDeploymentsAPIDelete1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) Delete1Execute(r *BuildsAndDeploymentsAPIDelete1Request) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.deploymentSequenceNumber!=nil {
        withUrlQueryParam(requestURL, "deploymentSequenceNumber", *r.deploymentSequenceNumber)
    }
    if r.key!=nil {
        withUrlQueryParam(requestURL, "key", *r.key)
    }
    if r.environmentKey!=nil {
        withUrlQueryParam(requestURL, "environmentKey", *r.environmentKey)
    }
    return a.makeDelete1Call(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) Delete1(ctx context.Context, projectKey string, commitId string, repositorySlug string, deploymentSequenceNumber string, key string, environmentKey string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "deploymentSequenceNumber", deploymentSequenceNumber)
    withUrlQueryParam(requestURL, "key", key)
    withUrlQueryParam(requestURL, "environmentKey", environmentKey)
    return a.makeDelete1Call(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeDelete1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPIDeleteACodeInsightsReportRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key string
}

func (r *BuildsAndDeploymentsAPIDeleteACodeInsightsReportRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeleteACodeInsightsReportExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteACodeInsightsReportRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIDeleteACodeInsightsReportRequest {
    return BuildsAndDeploymentsAPIDeleteACodeInsightsReportRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
        key: key,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteACodeInsightsReportExecute(r *BuildsAndDeploymentsAPIDeleteACodeInsightsReportRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(r.key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeleteACodeInsightsReportCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteACodeInsightsReport(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeleteACodeInsightsReportCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeDeleteACodeInsightsReportCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPIDeleteAnnotationsRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key string
    externalId *string
}

    // The external IDs for the annotations that are to be deleted. Can be specified more than once to delete by more than one external ID, or can be unspecified to delete all annotations.
func (r *BuildsAndDeploymentsAPIDeleteAnnotationsRequest) ExternalId(externalId string) *BuildsAndDeploymentsAPIDeleteAnnotationsRequest {
    r.externalId = &externalId
    return r
}

func (r *BuildsAndDeploymentsAPIDeleteAnnotationsRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeleteAnnotationsExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteAnnotationsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIDeleteAnnotationsRequest {
    return BuildsAndDeploymentsAPIDeleteAnnotationsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
        key: key,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteAnnotationsExecute(r *BuildsAndDeploymentsAPIDeleteAnnotationsRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(r.key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.externalId!=nil {
        withUrlQueryParam(requestURL, "externalId", *r.externalId)
    }
    return a.makeDeleteAnnotationsCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteAnnotations(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string, externalId string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "externalId", externalId)
    return a.makeDeleteAnnotationsCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeDeleteAnnotationsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPIDeleteRequiredBuildsMergeCheckRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    id int64
    repositorySlug string
}

func (r *BuildsAndDeploymentsAPIDeleteRequiredBuildsMergeCheckRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.DeleteRequiredBuildsMergeCheckExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteRequiredBuildsMergeCheckRequest(ctx context.Context, projectKey string, id int64, repositorySlug string) BuildsAndDeploymentsAPIDeleteRequiredBuildsMergeCheckRequest {
    return BuildsAndDeploymentsAPIDeleteRequiredBuildsMergeCheckRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteRequiredBuildsMergeCheckExecute(r *BuildsAndDeploymentsAPIDeleteRequiredBuildsMergeCheckRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(parameterValueToString(r.id)))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeleteRequiredBuildsMergeCheckCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) DeleteRequiredBuildsMergeCheck(ctx context.Context, projectKey string, id int64, repositorySlug string) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(parameterValueToString(id)))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeDeleteRequiredBuildsMergeCheckCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeDeleteRequiredBuildsMergeCheckCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodDelete
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPIGetRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key *string
}

    // the key of the build status
func (r *BuildsAndDeploymentsAPIGetRequest) Key(key string) *BuildsAndDeploymentsAPIGetRequest {
    r.key = &key
    return r
}

func (r *BuildsAndDeploymentsAPIGetRequest) Execute() (RestBuildStatus, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGetRequest {
    return BuildsAndDeploymentsAPIGetRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetExecute(r *BuildsAndDeploymentsAPIGetRequest) (RestBuildStatus, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.key!=nil {
        withUrlQueryParam(requestURL, "key", *r.key)
    }
    return a.makeGetCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) Get(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (RestBuildStatus, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/builds"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "key", key)
    return a.makeGetCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestBuildStatus, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestBuildStatus
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestBuildStatus](&response)
        if err == nil {
            result = response.Body.(RestBuildStatus)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGet1Request struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    deploymentSequenceNumber *string
    key *string
    environmentKey *string
}

    // the sequence number of the deployment, as detailed by the query param
func (r *BuildsAndDeploymentsAPIGet1Request) DeploymentSequenceNumber(deploymentSequenceNumber string) *BuildsAndDeploymentsAPIGet1Request {
    r.deploymentSequenceNumber = &deploymentSequenceNumber
    return r
}

    // the key of the deployment, as detailed by the query parameter
func (r *BuildsAndDeploymentsAPIGet1Request) Key(key string) *BuildsAndDeploymentsAPIGet1Request {
    r.key = &key
    return r
}

    // the key of the environment, as detailed by the query parameter
func (r *BuildsAndDeploymentsAPIGet1Request) EnvironmentKey(environmentKey string) *BuildsAndDeploymentsAPIGet1Request {
    r.environmentKey = &environmentKey
    return r
}

func (r *BuildsAndDeploymentsAPIGet1Request) Execute() (RestDeployment, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.Get1Execute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) Get1Request(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGet1Request {
    return BuildsAndDeploymentsAPIGet1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) Get1Execute(r *BuildsAndDeploymentsAPIGet1Request) (RestDeployment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.deploymentSequenceNumber!=nil {
        withUrlQueryParam(requestURL, "deploymentSequenceNumber", *r.deploymentSequenceNumber)
    }
    if r.key!=nil {
        withUrlQueryParam(requestURL, "key", *r.key)
    }
    if r.environmentKey!=nil {
        withUrlQueryParam(requestURL, "environmentKey", *r.environmentKey)
    }
    return a.makeGet1Call(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) Get1(ctx context.Context, projectKey string, commitId string, repositorySlug string, deploymentSequenceNumber string, key string, environmentKey string) (RestDeployment, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/api/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/deployments"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "deploymentSequenceNumber", deploymentSequenceNumber)
    withUrlQueryParam(requestURL, "key", key)
    withUrlQueryParam(requestURL, "environmentKey", environmentKey)
    return a.makeGet1Call(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGet1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestDeployment, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestDeployment
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestDeployment](&response)
        if err == nil {
            result = response.Body.(RestDeployment)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGetACodeInsightsReportRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key string
}

func (r *BuildsAndDeploymentsAPIGetACodeInsightsReportRequest) Execute() (RestInsightReport, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetACodeInsightsReportExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetACodeInsightsReportRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIGetACodeInsightsReportRequest {
    return BuildsAndDeploymentsAPIGetACodeInsightsReportRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
        key: key,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetACodeInsightsReportExecute(r *BuildsAndDeploymentsAPIGetACodeInsightsReportRequest) (RestInsightReport, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(r.key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetACodeInsightsReportCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) GetACodeInsightsReport(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (RestInsightReport, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetACodeInsightsReportCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetACodeInsightsReportCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestInsightReport, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestInsightReport
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestInsightReport](&response)
        if err == nil {
            result = response.Body.(RestInsightReport)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGetAnnotationsRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    severity *string
    path *string
    externalId *string
    type_ *string
    key *string
}

    // Return only annotations that have one of the given severities. Can be specified more than once to filter by more than one severity. Valid severities are &lt;code&gt;LOW&lt;/code&gt;, &lt;code&gt;MEDIUM&lt;/code&gt; and &lt;code&gt;HIGH&lt;/code&gt;.
func (r *BuildsAndDeploymentsAPIGetAnnotationsRequest) Severity(severity string) *BuildsAndDeploymentsAPIGetAnnotationsRequest {
    r.severity = &severity
    return r
}

    // Return only annotations that appear on one of the provided paths. Can be specified more than once to filter by more than one path.
func (r *BuildsAndDeploymentsAPIGetAnnotationsRequest) Path(path string) *BuildsAndDeploymentsAPIGetAnnotationsRequest {
    r.path = &path
    return r
}

    // Return only annotations that have one of the provided external IDs. Can be specified more than once to filter by more than one external ID.
func (r *BuildsAndDeploymentsAPIGetAnnotationsRequest) ExternalId(externalId string) *BuildsAndDeploymentsAPIGetAnnotationsRequest {
    r.externalId = &externalId
    return r
}

    // Return only annotations that have one of the given types. Can be specified more than once to filter by multiple types. Valid types are &lt;code&gt;BUG&lt;/code&gt;, &lt;code&gt;CODE_SMELL&lt;/code&gt;, and &lt;code&gt;VULNERABILITY&lt;/code&gt;.
func (r *BuildsAndDeploymentsAPIGetAnnotationsRequest) Type_(type_ string) *BuildsAndDeploymentsAPIGetAnnotationsRequest {
    r.type_ = &type_
    return r
}

    // Return only annotations that belong to one of the provided report keys. Can be specified more than once to filter by more than one report
func (r *BuildsAndDeploymentsAPIGetAnnotationsRequest) Key(key string) *BuildsAndDeploymentsAPIGetAnnotationsRequest {
    r.key = &key
    return r
}

func (r *BuildsAndDeploymentsAPIGetAnnotationsRequest) Execute() (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetAnnotationsExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetAnnotationsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGetAnnotationsRequest {
    return BuildsAndDeploymentsAPIGetAnnotationsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetAnnotationsExecute(r *BuildsAndDeploymentsAPIGetAnnotationsRequest) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.severity!=nil {
        withUrlQueryParam(requestURL, "severity", *r.severity)
    }
    if r.path!=nil {
        withUrlQueryParam(requestURL, "path", *r.path)
    }
    if r.externalId!=nil {
        withUrlQueryParam(requestURL, "externalId", *r.externalId)
    }
    if r.type_!=nil {
        withUrlQueryParam(requestURL, "type", *r.type_)
    }
    if r.key!=nil {
        withUrlQueryParam(requestURL, "key", *r.key)
    }
    return a.makeGetAnnotationsCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) GetAnnotations(ctx context.Context, projectKey string, commitId string, repositorySlug string, severity string, path string, externalId string, type_ string, key string) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "severity", severity)
    withUrlQueryParam(requestURL, "path", path)
    withUrlQueryParam(requestURL, "externalId", externalId)
    withUrlQueryParam(requestURL, "type", type_)
    withUrlQueryParam(requestURL, "key", key)
    return a.makeGetAnnotationsCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetAnnotationsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestInsightAnnotationsResponse
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestInsightAnnotationsResponse](&response)
        if err == nil {
            result = response.Body.(RestInsightAnnotationsResponse)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGetAnnotations1Request struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key string
}

func (r *BuildsAndDeploymentsAPIGetAnnotations1Request) Execute() (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetAnnotations1Execute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetAnnotations1Request(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPIGetAnnotations1Request {
    return BuildsAndDeploymentsAPIGetAnnotations1Request{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
        key: key,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetAnnotations1Execute(r *BuildsAndDeploymentsAPIGetAnnotations1Request) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(r.key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetAnnotations1Call(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) GetAnnotations1(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetAnnotations1Call(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetAnnotations1Call(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestInsightAnnotationsResponse, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestInsightAnnotationsResponse
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestInsightAnnotationsResponse](&response)
        if err == nil {
            result = response.Body.(RestInsightAnnotationsResponse)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGetBuildStatusStatsRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    commitId string
    includeUnique *bool
}

    // include a unique build result if there is either only one failed build, only one in-progress build or only one successful build
func (r *BuildsAndDeploymentsAPIGetBuildStatusStatsRequest) IncludeUnique(includeUnique bool) *BuildsAndDeploymentsAPIGetBuildStatusStatsRequest {
    r.includeUnique = &includeUnique
    return r
}

func (r *BuildsAndDeploymentsAPIGetBuildStatusStatsRequest) Execute() (RestBuildStats, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetBuildStatusStatsExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetBuildStatusStatsRequest(ctx context.Context, commitId string) BuildsAndDeploymentsAPIGetBuildStatusStatsRequest {
    return BuildsAndDeploymentsAPIGetBuildStatusStatsRequest{
        ApiService: a,
        ctx: ctx,
        commitId: commitId,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetBuildStatusStatsExecute(r *BuildsAndDeploymentsAPIGetBuildStatusStatsRequest) (RestBuildStats, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/build-status/latest/commits/stats/{commitId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.includeUnique!=nil {
        withUrlQueryParam(requestURL, "includeUnique", parameterValueToString(*r.includeUnique))
    }
    return a.makeGetBuildStatusStatsCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) GetBuildStatusStats(ctx context.Context, commitId string, includeUnique bool) (RestBuildStats, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/build-status/latest/commits/stats/{commitId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "includeUnique", parameterValueToString(includeUnique))
    return a.makeGetBuildStatusStatsCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetBuildStatusStatsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestBuildStats, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result RestBuildStats
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestBuildStats](&response)
        if err == nil {
            result = response.Body.(RestBuildStats)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    requestBody *[]string
}

    // full SHA1 of each commit
func (r *BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest) RequestBody(requestBody []string) *BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest {
    r.requestBody = &requestBody
    return r
}

func (r *BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest) Execute() (interface{}, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetMultipleBuildStatusStatsExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetMultipleBuildStatusStatsRequest(ctx context.Context) BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest {
    return BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest{
        ApiService: a,
        ctx: ctx,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetMultipleBuildStatusStatsExecute(r *BuildsAndDeploymentsAPIGetMultipleBuildStatusStatsRequest) (interface{}, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/build-status/latest/commits/stats"
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetMultipleBuildStatusStatsCall(r.ctx, requestURL, r.requestBody)
}

func (a *BuildsAndDeploymentsAPIRepository) GetMultipleBuildStatusStats(ctx context.Context, requestBody []string) (interface{}, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/build-status/latest/commits/stats"
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeGetMultipleBuildStatusStatsCall(ctx, requestURL, requestBody)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetMultipleBuildStatusStatsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (interface{}, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPost
	requestUrl := requestURL.String()

    var result interface{}
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[interface{}](&response)
        if err == nil {
            result = response.Body.(interface{})
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    repositorySlug string
    start *float32
    limit *float32
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest) Start(start float32) *BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest) Limit(limit float32) *BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest {
    r.limit = &limit
    return r
}

func (r *BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest) Execute() (GetPageOfRequiredBuildsMergeChecks200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetPageOfRequiredBuildsMergeChecksExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetPageOfRequiredBuildsMergeChecksRequest(ctx context.Context, projectKey string, repositorySlug string) BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest {
    return BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetPageOfRequiredBuildsMergeChecksExecute(r *BuildsAndDeploymentsAPIGetPageOfRequiredBuildsMergeChecksRequest) (GetPageOfRequiredBuildsMergeChecks200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/conditions"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetPageOfRequiredBuildsMergeChecksCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) GetPageOfRequiredBuildsMergeChecks(ctx context.Context, projectKey string, repositorySlug string, start float32, limit float32) (GetPageOfRequiredBuildsMergeChecks200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/conditions"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetPageOfRequiredBuildsMergeChecksCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetPageOfRequiredBuildsMergeChecksCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetPageOfRequiredBuildsMergeChecks200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetPageOfRequiredBuildsMergeChecks200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetPageOfRequiredBuildsMergeChecks200Response](&response)
        if err == nil {
            result = response.Body.(GetPageOfRequiredBuildsMergeChecks200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPIGetReportsRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    start *float32
    limit *float32
}

    // Start number for the page (inclusive). If not passed, first page is assumed.
func (r *BuildsAndDeploymentsAPIGetReportsRequest) Start(start float32) *BuildsAndDeploymentsAPIGetReportsRequest {
    r.start = &start
    return r
}

    // Number of items to return. If not passed, a page size of 25 is used.
func (r *BuildsAndDeploymentsAPIGetReportsRequest) Limit(limit float32) *BuildsAndDeploymentsAPIGetReportsRequest {
    r.limit = &limit
    return r
}

func (r *BuildsAndDeploymentsAPIGetReportsRequest) Execute() (GetReports200Response, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.GetReportsExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) GetReportsRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string) BuildsAndDeploymentsAPIGetReportsRequest {
    return BuildsAndDeploymentsAPIGetReportsRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) GetReportsExecute(r *BuildsAndDeploymentsAPIGetReportsRequest) (GetReports200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    if r.start!=nil {
        withUrlQueryParam(requestURL, "start", parameterValueToString(*r.start))
    }
    if r.limit!=nil {
        withUrlQueryParam(requestURL, "limit", parameterValueToString(*r.limit))
    }
    return a.makeGetReportsCall(r.ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) GetReports(ctx context.Context, projectKey string, commitId string, repositorySlug string, start float32, limit float32) (GetReports200Response, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    withUrlQueryParam(requestURL, "start", parameterValueToString(start))
    withUrlQueryParam(requestURL, "limit", parameterValueToString(limit))
    return a.makeGetReportsCall(ctx, requestURL, nil)
}

func (a *BuildsAndDeploymentsAPIRepository) makeGetReportsCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (GetReports200Response, aurestclientapi.ParsedResponse, error) {
	method := http.MethodGet
	requestUrl := requestURL.String()

    var result GetReports200Response
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[GetReports200Response](&response)
        if err == nil {
            result = response.Body.(GetReports200Response)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPISetACodeInsightsReportRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    commitId string
    repositorySlug string
    key string
    restSetInsightReportRequest *RestSetInsightReportRequest
}

    // The request object containing the details of the report to create (see example).
func (r *BuildsAndDeploymentsAPISetACodeInsightsReportRequest) RestSetInsightReportRequest(restSetInsightReportRequest RestSetInsightReportRequest) *BuildsAndDeploymentsAPISetACodeInsightsReportRequest {
    r.restSetInsightReportRequest = &restSetInsightReportRequest
    return r
}

func (r *BuildsAndDeploymentsAPISetACodeInsightsReportRequest) Execute() (RestInsightReport, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.SetACodeInsightsReportExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) SetACodeInsightsReportRequest(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPISetACodeInsightsReportRequest {
    return BuildsAndDeploymentsAPISetACodeInsightsReportRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        commitId: commitId,
        repositorySlug: repositorySlug,
        key: key,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) SetACodeInsightsReportExecute(r *BuildsAndDeploymentsAPISetACodeInsightsReportRequest) (RestInsightReport, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(r.key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeSetACodeInsightsReportCall(r.ctx, requestURL, r.restSetInsightReportRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) SetACodeInsightsReport(ctx context.Context, projectKey string, commitId string, repositorySlug string, key string, restSetInsightReportRequest RestSetInsightReportRequest) (RestInsightReport, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeSetACodeInsightsReportCall(ctx, requestURL, restSetInsightReportRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) makeSetACodeInsightsReportCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestInsightReport, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestInsightReport
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestInsightReport](&response)
        if err == nil {
            result = response.Body.(RestInsightReport)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}
 type BuildsAndDeploymentsAPISetAnnotationRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    externalId string
    commitId string
    repositorySlug string
    key string
    restSingleAddInsightAnnotationRequest *RestSingleAddInsightAnnotationRequest
}

    // The new annotation that is to replace the existing one.
func (r *BuildsAndDeploymentsAPISetAnnotationRequest) RestSingleAddInsightAnnotationRequest(restSingleAddInsightAnnotationRequest RestSingleAddInsightAnnotationRequest) *BuildsAndDeploymentsAPISetAnnotationRequest {
    r.restSingleAddInsightAnnotationRequest = &restSingleAddInsightAnnotationRequest
    return r
}

func (r *BuildsAndDeploymentsAPISetAnnotationRequest) Execute() (aurestclientapi.ParsedResponse, error) {
    return r.ApiService.SetAnnotationExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) SetAnnotationRequest(ctx context.Context, projectKey string, externalId string, commitId string, repositorySlug string, key string) BuildsAndDeploymentsAPISetAnnotationRequest {
    return BuildsAndDeploymentsAPISetAnnotationRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        externalId: externalId,
        commitId: commitId,
        repositorySlug: repositorySlug,
        key: key,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) SetAnnotationExecute(r *BuildsAndDeploymentsAPISetAnnotationRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations/{externalId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{externalId}", urlUtil.PathEscape(r.externalId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(r.commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(r.key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeSetAnnotationCall(r.ctx, requestURL, r.restSingleAddInsightAnnotationRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) SetAnnotation(ctx context.Context, projectKey string, externalId string, commitId string, repositorySlug string, key string, restSingleAddInsightAnnotationRequest RestSingleAddInsightAnnotationRequest) (aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/insights/latest/projects/{projectKey}/repos/{repositorySlug}/commits/{commitId}/reports/{key}/annotations/{externalId}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{externalId}", urlUtil.PathEscape(externalId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{commitId}", urlUtil.PathEscape(commitId))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{key}", urlUtil.PathEscape(key))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeSetAnnotationCall(ctx, requestURL, restSingleAddInsightAnnotationRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) makeSetAnnotationCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return response, err
	}
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }
    if response.Status == 404 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return response, err
    }

    if response.Status < 400 {
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return response, err
}
 type BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest struct {
    ctx context.Context
    ApiService *BuildsAndDeploymentsAPIRepository
    projectKey string
    id int64
    repositorySlug string
    restRequiredBuildConditionSetRequest *RestRequiredBuildConditionSetRequest
}

    // The request specifying the required build parent keys, ref matcher and exemption matcher
func (r *BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest) RestRequiredBuildConditionSetRequest(restRequiredBuildConditionSetRequest RestRequiredBuildConditionSetRequest) *BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest {
    r.restRequiredBuildConditionSetRequest = &restRequiredBuildConditionSetRequest
    return r
}

func (r *BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest) Execute() (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
    return r.ApiService.UpdateRequiredBuildsMergeCheckExecute(r)
}

func (a *BuildsAndDeploymentsAPIRepository) UpdateRequiredBuildsMergeCheckRequest(ctx context.Context, projectKey string, id int64, repositorySlug string) BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest {
    return BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest{
        ApiService: a,
        ctx: ctx,
        projectKey: projectKey,
        id: id,
        repositorySlug: repositorySlug,
    }
}

func (a *BuildsAndDeploymentsAPIRepository) UpdateRequiredBuildsMergeCheckExecute(r *BuildsAndDeploymentsAPIUpdateRequiredBuildsMergeCheckRequest) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(r.projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(parameterValueToString(r.id)))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(r.repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateRequiredBuildsMergeCheckCall(r.ctx, requestURL, r.restRequiredBuildConditionSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) UpdateRequiredBuildsMergeCheck(ctx context.Context, projectKey string, id int64, repositorySlug string, restRequiredBuildConditionSetRequest RestRequiredBuildConditionSetRequest) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
    fullUrlValue := a.baseUrl() + "/required-builds/latest/projects/{projectKey}/repos/{repositorySlug}/condition/{id}"
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{projectKey}", urlUtil.PathEscape(projectKey))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{id}", urlUtil.PathEscape(parameterValueToString(id)))
    fullUrlValue = strings.ReplaceAll(fullUrlValue, "{repositorySlug}", urlUtil.PathEscape(repositorySlug))
    requestURL, _ := urlUtil.Parse(fullUrlValue)
    return a.makeUpdateRequiredBuildsMergeCheckCall(ctx, requestURL, restRequiredBuildConditionSetRequest)
}

func (a *BuildsAndDeploymentsAPIRepository) makeUpdateRequiredBuildsMergeCheckCall(ctx context.Context, requestURL *urlUtil.URL, requestBody any) (RestRequiredBuildCondition, aurestclientapi.ParsedResponse, error) {
	method := http.MethodPut
	requestUrl := requestURL.String()

    var result RestRequiredBuildCondition
    emptyResponse := make([]byte, 0)
    responseBodyPointer := &emptyResponse
    response := aurestclientapi.ParsedResponse{
        Body: &responseBodyPointer,
    }
    err := a.httpClient().Perform(ctx, method, requestUrl, requestBody, &response)
	if err != nil {
		return result,response, err
	}
    if response.Status == 400 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }
    if response.Status == 401 {
		err = safeUnmarshal[DismissRetentionConfigReviewNotification401Response](&response)
        if err == nil {
            err = NewError(fmt.Sprintf("Got status %d", response.Status), response.Status)
        }
        return result, response, err
    }

    if response.Status < 400 {
        err = safeUnmarshal[RestRequiredBuildCondition](&response)
        if err == nil {
            result = response.Body.(RestRequiredBuildCondition)
        }
    } else {
        err = NewError(fmt.Sprintf("Got unknown status %d", response.Status), response.Status)
    }
    return result, response, err
}

type BuildsAndDeploymentsAPIRepository struct {
    ApiClient *ApiClient
}

func (c *BuildsAndDeploymentsAPIRepository) baseUrl() string {
    return c.ApiClient.BaseUrl
}

func (c *BuildsAndDeploymentsAPIRepository) httpClient() aurestclientapi.Client {
    return c.ApiClient.Client
}

func NewBuildsAndDeploymentsAPI(client *ApiClient) BuildsAndDeploymentsAPI {
    return &BuildsAndDeploymentsAPIRepository{ApiClient: client}
}
